"use strict";function _createForOfIteratorHelper(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=_unsupportedIterableToArray(e))){var t=0,n=function(){};return{s:n,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var r,i,o=!0,a=!1;return{s:function(){r=e[Symbol.iterator]()},n:function(){var e=r.next();return o=e.done,e},e:function(e){a=!0,i=e},f:function(){try{o||null==r.return||r.return()}finally{if(a)throw i}}}}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(n):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(e,t):void 0}}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(e,t){"object"===("undefined"==typeof module?"undefined":_typeof(module))&&"object"===_typeof(module.exports)?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:void 0,function(P,e){function h(e){return null!=e&&e===e.window}var t=[],M=P.document,r=Object.getPrototypeOf,s=t.slice,S=t.concat,l=t.push,i=t.indexOf,n={},o=n.toString,b=n.hasOwnProperty,a=b.toString,u=a.call(Object),m={},v=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},c={type:!0,src:!0,nonce:!0,noModule:!0};function g(e,t,n){var r,i,o=(n=n||M).createElement("script");if(o.text=e,t)for(r in c)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function y(e){return null==e?e+"":"object"===_typeof(e)||"function"==typeof e?n[o.call(e)]||"object":_typeof(e)}var G=function e(t,n){return new e.fn.init(t,n)},d=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function f(e){var t=!!e&&"length"in e&&e.length,n=y(e);return!v(e)&&!h(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}G.fn=G.prototype={jquery:"3.4.1",constructor:G,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=G.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return G.each(this,e)},map:function(n){return this.pushStack(G.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:t.sort,splice:t.splice},G.extend=G.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,l=arguments.length,u=!1;for("boolean"==typeof a&&(u=a,a=arguments[s]||{},s++),"object"===_typeof(a)||v(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],"__proto__"!==t&&a!==r&&(u&&r&&(G.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[t],o=i&&!Array.isArray(n)?[]:i||G.isPlainObject(n)?n:{},i=!1,a[t]=G.extend(u,o,r)):void 0!==r&&(a[t]=r));return a},G.extend({expando:"jQuery"+("3.4.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==o.call(e))&&(!(t=r(e))||"function"==typeof(n=b.call(t,"constructor")&&t.constructor)&&a.call(n)===u)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t){g(e,{nonce:t&&t.nonce})},each:function(e,t){var n,r=0;if(f(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(d,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(f(Object(e))?G.merge(n,"string"==typeof e?[e]:e):l.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:i.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,a=!n;i<o;i++)!t(e[i],i)!=a&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,a=[];if(f(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&a.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&a.push(i);return S.apply([],a)},guid:1,support:m}),"function"==typeof Symbol&&(G.fn[Symbol.iterator]=t[Symbol.iterator]),G.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){n["[object "+t+"]"]=t.toLowerCase()});var p=function(n){function d(e,t,n){var r="0x"+t-65536;return r!=r||n?t:r<0?String.fromCharCode(65536+r):String.fromCharCode(r>>10|55296,1023&r|56320)}function i(){A()}var e,p,g,o,a,T,f,h,y,l,u,A,P,s,M,S,c,b,m,G="sizzle"+ +new Date,v=n.document,C=0,r=0,H=le(),E=le(),w=le(),x=le(),B=function(e,t){return e===t&&(u=!0),0},D={}.hasOwnProperty,t=[],I=t.pop,L=t.push,N=t.push,k=t.slice,O=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},_="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",V="[\\x20\\t\\r\\n\\f]",R="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",X="\\["+V+"*("+R+")(?:"+V+"*([*^$|!~]?=)"+V+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+R+"))|)"+V+"*\\]",F=":("+R+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+X+")*)|.*)\\)|)",W=new RegExp(V+"+","g"),j=new RegExp("^"+V+"+|((?:^|[^\\\\])(?:\\\\.)*)"+V+"+$","g"),q=new RegExp("^"+V+"*,"+V+"*"),U=new RegExp("^"+V+"*([>+~]|"+V+")"+V+"*"),K=new RegExp(V+"|>"),$=new RegExp(F),Q=new RegExp("^"+R+"$"),z={ID:new RegExp("^#("+R+")"),CLASS:new RegExp("^\\.("+R+")"),TAG:new RegExp("^("+R+"|[*])"),ATTR:new RegExp("^"+X),PSEUDO:new RegExp("^"+F),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+V+"*(even|odd|(([+-]|)(\\d*)n|)"+V+"*(?:([+-]|)"+V+"*(\\d+)|))"+V+"*\\)|)","i"),bool:new RegExp("^(?:"+_+")$","i"),needsContext:new RegExp("^"+V+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+V+"*((?:-\\d)?\\d*)"+V+"*\\)|)(?=[^-]|$)","i")},Y=/HTML$/i,Z=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,ee=/^[^{]+\{\s*\[native \w/,te=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ne=/[+~]/,re=new RegExp("\\\\([\\da-f]{1,6}"+V+"?|("+V+")|.)","ig"),ie=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,oe=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ae=ge(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{N.apply(t=k.call(v.childNodes),v.childNodes),t[v.childNodes.length].nodeType}catch(e){N={apply:t.length?function(e,t){L.apply(e,k.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function se(t,e,n,r){var i,o,a,s,l,u,c,d=e&&e.ownerDocument,f=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==f&&9!==f&&11!==f)return n;if(!r&&((e?e.ownerDocument||e:v)!==P&&A(e),e=e||P,M)){if(11!==f&&(l=te.exec(t)))if(i=l[1]){if(9===f){if(!(a=e.getElementById(i)))return n;if(a.id===i)return n.push(a),n}else if(d&&(a=d.getElementById(i))&&m(e,a)&&a.id===i)return n.push(a),n}else{if(l[2])return N.apply(n,e.getElementsByTagName(t)),n;if((i=l[3])&&p.getElementsByClassName&&e.getElementsByClassName)return N.apply(n,e.getElementsByClassName(i)),n}if(p.qsa&&!x[t+" "]&&(!S||!S.test(t))&&(1!==f||"object"!==e.nodeName.toLowerCase())){if(c=t,d=e,1===f&&K.test(t)){for((s=e.getAttribute("id"))?s=s.replace(ie,oe):e.setAttribute("id",s=G),o=(u=T(t)).length;o--;)u[o]="#"+s+" "+ve(u[o]);c=u.join(","),d=ne.test(t)&&be(e.parentNode)||e}try{return N.apply(n,d.querySelectorAll(c)),n}catch(e){x(t,!0)}finally{s===G&&e.removeAttribute("id")}}}return h(t.replace(j,"$1"),e,n,r)}function le(){var r=[];return function e(t,n){return r.push(t+" ")>g.cacheLength&&delete e[r.shift()],e[t+" "]=n}}function ue(e){return e[G]=!0,e}function ce(e){var t=P.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function de(e,t){for(var n=e.split("|"),r=n.length;r--;)g.attrHandle[n[r]]=t}function fe(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function pe(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function Te(n){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===n}}function he(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&ae(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function Se(a){return ue(function(o){return o=+o,ue(function(e,t){for(var n,r=a([],e.length,o),i=r.length;i--;)e[n=r[i]]&&(e[n]=!(t[n]=e[n]))})})}function be(e){return e&&void 0!==e.getElementsByTagName&&e}for(e in p=se.support={},a=se.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!Y.test(t||n&&n.nodeName||"HTML")},A=se.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:v;return r!==P&&9===r.nodeType&&r.documentElement&&(s=(P=r).documentElement,M=!a(P),v!==P&&(n=P.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",i,!1):n.attachEvent&&n.attachEvent("onunload",i)),p.attributes=ce(function(e){return e.className="i",!e.getAttribute("className")}),p.getElementsByTagName=ce(function(e){return e.appendChild(P.createComment("")),!e.getElementsByTagName("*").length}),p.getElementsByClassName=ee.test(P.getElementsByClassName),p.getById=ce(function(e){return s.appendChild(e).id=G,!P.getElementsByName||!P.getElementsByName(G).length}),p.getById?(g.filter.ID=function(e){var t=e.replace(re,d);return function(e){return e.getAttribute("id")===t}},g.find.ID=function(e,t){if(void 0!==t.getElementById&&M){var n=t.getElementById(e);return n?[n]:[]}}):(g.filter.ID=function(e){var n=e.replace(re,d);return function(e){var t=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return t&&t.value===n}},g.find.ID=function(e,t){if(void 0!==t.getElementById&&M){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(i=t.getElementsByName(e),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),g.find.TAG=p.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):p.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"!==e)return o;for(;n=o[i++];)1===n.nodeType&&r.push(n);return r},g.find.CLASS=p.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&M)return t.getElementsByClassName(e)},c=[],S=[],(p.qsa=ee.test(P.querySelectorAll))&&(ce(function(e){s.appendChild(e).innerHTML="<a id='"+G+"'></a><select id='"+G+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&S.push("[*^$]="+V+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||S.push("\\["+V+"*(?:value|"+_+")"),e.querySelectorAll("[id~="+G+"-]").length||S.push("~="),e.querySelectorAll(":checked").length||S.push(":checked"),e.querySelectorAll("a#"+G+"+*").length||S.push(".#.+[+~]")}),ce(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=P.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&S.push("name"+V+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&S.push(":enabled",":disabled"),s.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&S.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),S.push(",.*:")})),(p.matchesSelector=ee.test(b=s.matches||s.webkitMatchesSelector||s.mozMatchesSelector||s.oMatchesSelector||s.msMatchesSelector))&&ce(function(e){p.disconnectedMatch=b.call(e,"*"),b.call(e,"[s!='']:x"),c.push("!=",F)}),S=S.length&&new RegExp(S.join("|")),c=c.length&&new RegExp(c.join("|")),t=ee.test(s.compareDocumentPosition),m=t||ee.test(s.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},B=t?function(e,t){if(e===t)return u=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!p.sortDetached&&t.compareDocumentPosition(e)===n?e===P||e.ownerDocument===v&&m(v,e)?-1:t===P||t.ownerDocument===v&&m(v,t)?1:l?O(l,e)-O(l,t):0:4&n?-1:1)}:function(e,t){if(e===t)return u=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!i||!o)return e===P?-1:t===P?1:i?-1:o?1:l?O(l,e)-O(l,t):0;if(i===o)return fe(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;a[r]===s[r];)r++;return r?fe(a[r],s[r]):a[r]===v?-1:s[r]===v?1:0}),P},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if((e.ownerDocument||e)!==P&&A(e),p.matchesSelector&&M&&!x[t+" "]&&(!c||!c.test(t))&&(!S||!S.test(t)))try{var n=b.call(e,t);if(n||p.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){x(t,!0)}return 0<se(t,P,null,[e]).length},se.contains=function(e,t){return(e.ownerDocument||e)!==P&&A(e),m(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!==P&&A(e);var n=g.attrHandle[t.toLowerCase()],r=n&&D.call(g.attrHandle,t.toLowerCase())?n(e,t,!M):void 0;return void 0!==r?r:p.attributes||!M?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},se.escape=function(e){return(e+"").replace(ie,oe)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,n=[],r=0,i=0;if(u=!p.detectDuplicates,l=!p.sortStable&&e.slice(0),e.sort(B),u){for(;t=e[i++];)t===e[i]&&(r=n.push(i));for(;r--;)e.splice(n[r],1)}return l=null,e},o=se.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=o(t);return n},(g=se.selectors={cacheLength:50,createPseudo:ue,match:z,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(re,d),e[3]=(e[3]||e[4]||e[5]||"").replace(re,d),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return z.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&$.test(n)&&(t=T(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(re,d).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=H[e+" "];return t||(t=new RegExp("(^|"+V+")"+e+"("+V+"|$)"))&&H(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(n,r,i){return function(e){var t=se.attr(e,n);return null==t?"!="===r:!r||(t+="","="===r?t===i:"!="===r?t!==i:"^="===r?i&&0===t.indexOf(i):"*="===r?i&&-1<t.indexOf(i):"$="===r?i&&t.slice(-i.length)===i:"~="===r?-1<(" "+t.replace(W," ")+" ").indexOf(i):"|="===r&&(t===i||t.slice(0,i.length+1)===i+"-"))}},CHILD:function(T,e,t,h,S){var b="nth"!==T.slice(0,3),m="last"!==T.slice(-4),v="of-type"===e;return 1===h&&0===S?function(e){return!!e.parentNode}:function(e,t,n){var r,i,o,a,s,l,u=b!=m?"nextSibling":"previousSibling",c=e.parentNode,d=v&&e.nodeName.toLowerCase(),f=!n&&!v,p=!1;if(c){if(b){for(;u;){for(a=e;a=a[u];)if(v?a.nodeName.toLowerCase()===d:1===a.nodeType)return!1;l=u="only"===T&&!l&&"nextSibling"}return!0}if(l=[m?c.firstChild:c.lastChild],m&&f){for(p=(s=(r=(i=(o=(a=c)[G]||(a[G]={}))[a.uniqueID]||(o[a.uniqueID]={}))[T]||[])[0]===C&&r[1])&&r[2],a=s&&c.childNodes[s];a=++s&&a&&a[u]||(p=s=0)||l.pop();)if(1===a.nodeType&&++p&&a===e){i[T]=[C,s,p];break}}else if(f&&(p=s=(r=(i=(o=(a=e)[G]||(a[G]={}))[a.uniqueID]||(o[a.uniqueID]={}))[T]||[])[0]===C&&r[1]),!1===p)for(;(a=++s&&a&&a[u]||(p=s=0)||l.pop())&&((v?a.nodeName.toLowerCase()!==d:1!==a.nodeType)||!++p||(f&&((i=(o=a[G]||(a[G]={}))[a.uniqueID]||(o[a.uniqueID]={}))[T]=[C,p]),a!==e)););return(p-=S)===h||p%h==0&&0<=p/h}}},PSEUDO:function(e,o){var t,a=g.pseudos[e]||g.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return a[G]?a(o):1<a.length?(t=[e,e,"",o],g.setFilters.hasOwnProperty(e.toLowerCase())?ue(function(e,t){for(var n,r=a(e,o),i=r.length;i--;)e[n=O(e,r[i])]=!(t[n]=r[i])}):function(e){return a(e,0,t)}):a}},pseudos:{not:ue(function(e){var r=[],i=[],s=f(e.replace(j,"$1"));return s[G]?ue(function(e,t,n,r){for(var i,o=s(e,null,r,[]),a=e.length;a--;)(i=o[a])&&(e[a]=!(t[a]=i))}):function(e,t,n){return r[0]=e,s(r,null,n,i),r[0]=null,!i.pop()}}),has:ue(function(t){return function(e){return 0<se(t,e).length}}),contains:ue(function(t){return t=t.replace(re,d),function(e){return-1<(e.textContent||o(e)).indexOf(t)}}),lang:ue(function(n){return Q.test(n||"")||se.error("unsupported lang: "+n),n=n.replace(re,d).toLowerCase(),function(e){var t;do{if(t=M?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=n.location&&n.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===s},focus:function(e){return e===P.activeElement&&(!P.hasFocus||P.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:he(!1),disabled:he(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!g.pseudos.empty(e)},header:function(e){return J.test(e.nodeName)},input:function(e){return Z.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:Se(function(){return[0]}),last:Se(function(e,t){return[t-1]}),eq:Se(function(e,t,n){return[n<0?n+t:n]}),even:Se(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:Se(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:Se(function(e,t,n){for(var r=n<0?n+t:t<n?t:n;0<=--r;)e.push(r);return e}),gt:Se(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=g.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})g.pseudos[e]=pe(e);for(e in{submit:!0,reset:!0})g.pseudos[e]=Te(e);function me(){}function ve(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function ge(s,e,t){var l=e.dir,u=e.next,c=u||l,d=t&&"parentNode"===c,f=r++;return e.first?function(e,t,n){for(;e=e[l];)if(1===e.nodeType||d)return s(e,t,n);return!1}:function(e,t,n){var r,i,o,a=[C,f];if(n){for(;e=e[l];)if((1===e.nodeType||d)&&s(e,t,n))return!0}else for(;e=e[l];)if(1===e.nodeType||d)if(i=(o=e[G]||(e[G]={}))[e.uniqueID]||(o[e.uniqueID]={}),u&&u===e.nodeName.toLowerCase())e=e[l]||e;else{if((r=i[c])&&r[0]===C&&r[1]===f)return a[2]=r[2];if((i[c]=a)[2]=s(e,t,n))return!0}return!1}}function ye(i){return 1<i.length?function(e,t,n){for(var r=i.length;r--;)if(!i[r](e,t,n))return!1;return!0}:i[0]}function Ae(e,t,n,r,i){for(var o,a=[],s=0,l=e.length,u=null!=t;s<l;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),u&&t.push(s)));return a}function Pe(p,T,h,S,b,e){return S&&!S[G]&&(S=Pe(S)),b&&!b[G]&&(b=Pe(b,e)),ue(function(e,t,n,r){var i,o,a,s=[],l=[],u=t.length,c=e||function(e,t,n){for(var r=0,i=t.length;r<i;r++)se(e,t[r],n);return n}(T||"*",n.nodeType?[n]:n,[]),d=!p||!e&&T?c:Ae(c,s,p,n,r),f=h?b||(e?p:u||S)?[]:t:d;if(h&&h(d,f,n,r),S)for(i=Ae(f,l),S(i,[],n,r),o=i.length;o--;)(a=i[o])&&(f[l[o]]=!(d[l[o]]=a));if(e){if(b||p){if(b){for(i=[],o=f.length;o--;)(a=f[o])&&i.push(d[o]=a);b(null,f=[],i,r)}for(o=f.length;o--;)(a=f[o])&&-1<(i=b?O(e,a):s[o])&&(e[i]=!(t[i]=a))}}else f=Ae(f===t?f.splice(u,f.length):f),b?b(null,t,f,r):N.apply(t,f)})}function Me(e){for(var i,t,n,r=e.length,o=g.relative[e[0].type],a=o||g.relative[" "],s=o?1:0,l=ge(function(e){return e===i},a,!0),u=ge(function(e){return-1<O(i,e)},a,!0),c=[function(e,t,n){var r=!o&&(n||t!==y)||((i=t).nodeType?l:u)(e,t,n);return i=null,r}];s<r;s++)if(t=g.relative[e[s].type])c=[ge(ye(c),t)];else{if((t=g.filter[e[s].type].apply(null,e[s].matches))[G]){for(n=++s;n<r&&!g.relative[e[n].type];n++);return Pe(1<s&&ye(c),1<s&&ve(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(j,"$1"),t,s<n&&Me(e.slice(s,n)),n<r&&Me(e=e.slice(n)),n<r&&ve(e))}c.push(t)}return ye(c)}function Ge(S,b){function e(e,t,n,r,i){var o,a,s,l=0,u="0",c=e&&[],d=[],f=y,p=e||v&&g.find.TAG("*",i),T=C+=null==f?1:Math.random()||.1,h=p.length;for(i&&(y=t===P||t||i);u!==h&&null!=(o=p[u]);u++){if(v&&o){for(a=0,t||o.ownerDocument===P||(A(o),n=!M);s=S[a++];)if(s(o,t||P,n)){r.push(o);break}i&&(C=T)}m&&((o=!s&&o)&&l--,e&&c.push(o))}if(l+=u,m&&u!==l){for(a=0;s=b[a++];)s(c,d,t,n);if(e){if(0<l)for(;u--;)c[u]||d[u]||(d[u]=I.call(r));d=Ae(d)}N.apply(r,d),i&&!e&&0<d.length&&1<l+b.length&&se.uniqueSort(r)}return i&&(C=T,y=f),c}var m=0<b.length,v=0<S.length;return m?ue(e):e}return me.prototype=g.filters=g.pseudos,g.setFilters=new me,T=se.tokenize=function(e,t){var n,r,i,o,a,s,l,u=E[e+" "];if(u)return t?0:u.slice(0);for(a=e,s=[],l=g.preFilter;a;){for(o in n&&!(r=q.exec(a))||(r&&(a=a.slice(r[0].length)||a),s.push(i=[])),n=!1,(r=U.exec(a))&&(n=r.shift(),i.push({value:n,type:r[0].replace(j," ")}),a=a.slice(n.length)),g.filter)!(r=z[o].exec(a))||l[o]&&!(r=l[o](r))||(n=r.shift(),i.push({value:n,type:o,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?se.error(e):E(e,s).slice(0)},f=se.compile=function(e,t){var n,r=[],i=[],o=w[e+" "];if(!o){for(n=(t=t||T(e)).length;n--;)(o=Me(t[n]))[G]?r.push(o):i.push(o);(o=w(e,Ge(i,r))).selector=e}return o},h=se.select=function(e,t,n,r){var i,o,a,s,l,u="function"==typeof e&&e,c=!r&&T(e=u.selector||e);if(n=n||[],1===c.length){if(2<(o=c[0]=c[0].slice(0)).length&&"ID"===(a=o[0]).type&&9===t.nodeType&&M&&g.relative[o[1].type]){if(!(t=(g.find.ID(a.matches[0].replace(re,d),t)||[])[0]))return n;u&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(i=z.needsContext.test(e)?0:o.length;i--&&(a=o[i],!g.relative[s=a.type]);)if((l=g.find[s])&&(r=l(a.matches[0].replace(re,d),ne.test(o[0].type)&&be(t.parentNode)||t))){if(o.splice(i,1),!(e=r.length&&ve(o)))return N.apply(n,r),n;break}}return(u||f(e,c))(r,t,!M,n,!t||ne.test(e)&&be(t.parentNode)||t),n},p.sortStable=G.split("").sort(B).join("")===G,p.detectDuplicates=!!u,A(),p.sortDetached=ce(function(e){return 1&e.compareDocumentPosition(P.createElement("fieldset"))}),ce(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||de("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),p.attributes&&ce(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||de("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ce(function(e){return null==e.getAttribute("disabled")})||de(_,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),se}(P);G.find=p,G.expr=p.selectors,G.expr[":"]=G.expr.pseudos,G.uniqueSort=G.unique=p.uniqueSort,G.text=p.getText,G.isXMLDoc=p.isXML,G.contains=p.contains,G.escapeSelector=p.escape;function T(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&G(e).is(n))break;r.push(e)}return r}function A(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}var C=G.expr.match.needsContext;function H(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var E=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function w(e,n,r){return v(n)?G.grep(e,function(e,t){return!!n.call(e,t,e)!==r}):n.nodeType?G.grep(e,function(e){return e===n!==r}):"string"!=typeof n?G.grep(e,function(e){return-1<i.call(n,e)!==r}):G.filter(n,e,r)}G.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?G.find.matchesSelector(r,e)?[r]:[]:G.find.matches(e,G.grep(t,function(e){return 1===e.nodeType}))},G.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(G(e).filter(function(){for(t=0;t<r;t++)if(G.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)G.find(e,i[t],n);return 1<r?G.uniqueSort(n):n},filter:function(e){return this.pushStack(w(this,e||[],!1))},not:function(e){return this.pushStack(w(this,e||[],!0))},is:function(e){return!!w(this,"string"==typeof e&&C.test(e)?G(e):e||[],!1).length}});var x,B=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(G.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||x,"string"!=typeof e)return e.nodeType?(this[0]=e,this.length=1,this):v(e)?void 0!==n.ready?n.ready(e):e(G):G.makeArray(e,this);if(!(r="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:B.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof G?t[0]:t,G.merge(this,G.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:M,!0)),E.test(r[1])&&G.isPlainObject(t))for(r in t)v(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=M.getElementById(r[2]))&&(this[0]=i,this.length=1),this}).prototype=G.fn,x=G(M);var D=/^(?:parents|prev(?:Until|All))/,I={children:!0,contents:!0,next:!0,prev:!0};function L(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}G.fn.extend({has:function(e){var t=G(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(G.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],a="string"!=typeof e&&G(e);if(!C.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?-1<a.index(n):1===n.nodeType&&G.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(1<o.length?G.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?i.call(G(e),this[0]):i.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(G.uniqueSort(G.merge(this.get(),G(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),G.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return T(e,"parentNode")},parentsUntil:function(e,t,n){return T(e,"parentNode",n)},next:function(e){return L(e,"nextSibling")},prev:function(e){return L(e,"previousSibling")},nextAll:function(e){return T(e,"nextSibling")},prevAll:function(e){return T(e,"previousSibling")},nextUntil:function(e,t,n){return T(e,"nextSibling",n)},prevUntil:function(e,t,n){return T(e,"previousSibling",n)},siblings:function(e){return A((e.parentNode||{}).firstChild,e)},children:function(e){return A(e.firstChild)},contents:function(e){return void 0!==e.contentDocument?e.contentDocument:(H(e,"template")&&(e=e.content||e),G.merge([],e.childNodes))}},function(r,i){G.fn[r]=function(e,t){var n=G.map(this,i,e);return"Until"!==r.slice(-5)&&(t=e),t&&"string"==typeof t&&(n=G.filter(t,n)),1<this.length&&(I[r]||G.uniqueSort(n),D.test(r)&&n.reverse()),this.pushStack(n)}});var N=/[^\x20\t\r\n\f]+/g;function k(e){return e}function O(e){throw e}function _(e,t,n,r){var i;try{e&&v(i=e.promise)?i.call(e).done(t).fail(n):e&&v(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}G.Callbacks=function(r){var e,n;r="string"==typeof r?(e=r,n={},G.each(e.match(N)||[],function(e,t){n[t]=!0}),n):G.extend({},r);function i(){for(s=s||r.once,a=o=!0;u.length;c=-1)for(t=u.shift();++c<l.length;)!1===l[c].apply(t[0],t[1])&&r.stopOnFalse&&(c=l.length,t=!1);r.memory||(t=!1),o=!1,s&&(l=t?[]:"")}var o,t,a,s,l=[],u=[],c=-1,d={add:function(){return l&&(t&&!o&&(c=l.length-1,u.push(t)),function n(e){G.each(e,function(e,t){v(t)?r.unique&&d.has(t)||l.push(t):t&&t.length&&"string"!==y(t)&&n(t)})}(arguments),t&&!o&&i()),this},remove:function(){return G.each(arguments,function(e,t){for(var n;-1<(n=G.inArray(t,l,n));)l.splice(n,1),n<=c&&c--}),this},has:function(e){return e?-1<G.inArray(e,l):0<l.length},empty:function(){return l=l&&[],this},disable:function(){return s=u=[],l=t="",this},disabled:function(){return!l},lock:function(){return s=u=[],t||o||(l=t=""),this},locked:function(){return!!s},fireWith:function(e,t){return s||(t=[e,(t=t||[]).slice?t.slice():t],u.push(t),o||i()),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!a}};return d},G.extend({Deferred:function(e){var o=[["notify","progress",G.Callbacks("memory"),G.Callbacks("memory"),2],["resolve","done",G.Callbacks("once memory"),G.Callbacks("once memory"),0,"resolved"],["reject","fail",G.Callbacks("once memory"),G.Callbacks("once memory"),1,"rejected"]],i="pending",a={state:function(){return i},always:function(){return s.done(arguments).fail(arguments),this},catch:function(e){return a.then(null,e)},pipe:function(){var i=arguments;return G.Deferred(function(r){G.each(o,function(e,t){var n=v(i[t[4]])&&i[t[4]];s[t[1]](function(){var e=n&&n.apply(this,arguments);e&&v(e.promise)?e.promise().progress(r.notify).done(r.resolve).fail(r.reject):r[t[0]+"With"](this,n?[e]:arguments)})}),i=null}).promise()},then:function(t,n,r){var l=0;function u(i,o,a,s){return function(){function e(){var e,t;if(!(i<l)){if((e=a.apply(n,r))===o.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"===_typeof(e)||"function"==typeof e)&&e.then,v(t)?s?t.call(e,u(l,o,k,s),u(l,o,O,s)):(l++,t.call(e,u(l,o,k,s),u(l,o,O,s),u(l,o,k,o.notifyWith))):(a!==k&&(n=void 0,r=[e]),(s||o.resolveWith)(n,r))}}var n=this,r=arguments,t=s?e:function(){try{e()}catch(e){G.Deferred.exceptionHook&&G.Deferred.exceptionHook(e,t.stackTrace),l<=i+1&&(a!==O&&(n=void 0,r=[e]),o.rejectWith(n,r))}};i?t():(G.Deferred.getStackHook&&(t.stackTrace=G.Deferred.getStackHook()),P.setTimeout(t))}}return G.Deferred(function(e){o[0][3].add(u(0,e,v(r)?r:k,e.notifyWith)),o[1][3].add(u(0,e,v(t)?t:k)),o[2][3].add(u(0,e,v(n)?n:O))}).promise()},promise:function(e){return null!=e?G.extend(e,a):a}},s={};return G.each(o,function(e,t){var n=t[2],r=t[5];a[t[1]]=n.add,r&&n.add(function(){i=r},o[3-e][2].disable,o[3-e][3].disable,o[0][2].lock,o[0][3].lock),n.add(t[3].fire),s[t[0]]=function(){return s[t[0]+"With"](this===s?void 0:this,arguments),this},s[t[0]+"With"]=n.fireWith}),a.promise(s),e&&e.call(s,s),s},when:function(e){function t(t){return function(e){i[t]=this,o[t]=1<arguments.length?s.call(arguments):e,--n||a.resolveWith(i,o)}}var n=arguments.length,r=n,i=Array(r),o=s.call(arguments),a=G.Deferred();if(n<=1&&(_(e,a.done(t(r)).resolve,a.reject,!n),"pending"===a.state()||v(o[r]&&o[r].then)))return a.then();for(;r--;)_(o[r],t(r),a.reject);return a.promise()}});var V=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;G.Deferred.exceptionHook=function(e,t){P.console&&P.console.warn&&e&&V.test(e.name)&&P.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},G.readyException=function(e){P.setTimeout(function(){throw e})};var R=G.Deferred();function X(){M.removeEventListener("DOMContentLoaded",X),P.removeEventListener("load",X),G.ready()}G.fn.ready=function(e){return R.then(e).catch(function(e){G.readyException(e)}),this},G.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--G.readyWait:G.isReady)||(G.isReady=!0)!==e&&0<--G.readyWait||R.resolveWith(M,[G])}}),G.ready.then=R.then,"complete"===M.readyState||"loading"!==M.readyState&&!M.documentElement.doScroll?P.setTimeout(G.ready):(M.addEventListener("DOMContentLoaded",X),P.addEventListener("load",X));function F(e,t,n,r,i,o,a){var s=0,l=e.length,u=null==n;if("object"===y(n))for(s in i=!0,n)F(e,t,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,v(r)||(a=!0),u&&(t=a?(t.call(e,r),null):(u=t,function(e,t,n){return u.call(G(e),n)})),t))for(;s<l;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:u?t.call(e):l?t(e[0],n):o}var W=/^-ms-/,j=/-([a-z])/g;function q(e,t){return t.toUpperCase()}function U(e){return e.replace(W,"ms-").replace(j,q)}function K(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType}function $(){this.expando=G.expando+$.uid++}$.uid=1,$.prototype={cache:function(e){var t=e[this.expando];return t||(t={},K(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[U(t)]=n;else for(r in t)i[U(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][U(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(U):(t=U(t))in r?[t]:t.match(N)||[]).length;for(;n--;)delete r[t[n]]}void 0!==t&&!G.isEmptyObject(r)||(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!G.isEmptyObject(t)}};var Q=new $,z=new $,Y=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Z=/[A-Z]/g;function J(e,t,n){var r,i;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(Z,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n="true"===(i=n)||"false"!==i&&("null"===i?null:i===+i+""?+i:Y.test(i)?JSON.parse(i):i)}catch(e){}z.set(e,t,n)}else n=void 0;return n}G.extend({hasData:function(e){return z.hasData(e)||Q.hasData(e)},data:function(e,t,n){return z.access(e,t,n)},removeData:function(e,t){z.remove(e,t)},_data:function(e,t,n){return Q.access(e,t,n)},_removeData:function(e,t){Q.remove(e,t)}}),G.fn.extend({data:function(n,e){var t,r,i,o=this[0],a=o&&o.attributes;if(void 0!==n)return"object"===_typeof(n)?this.each(function(){z.set(this,n)}):F(this,function(e){var t;if(o&&void 0===e)return void 0!==(t=z.get(o,n))||void 0!==(t=J(o,n))?t:void 0;this.each(function(){z.set(this,n,e)})},null,e,1<arguments.length,null,!0);if(this.length&&(i=z.get(o),1===o.nodeType&&!Q.get(o,"hasDataAttrs"))){for(t=a.length;t--;)a[t]&&0===(r=a[t].name).indexOf("data-")&&(r=U(r.slice(5)),J(o,r,i[r]));Q.set(o,"hasDataAttrs",!0)}return i},removeData:function(e){return this.each(function(){z.remove(this,e)})}}),G.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=Q.get(e,t),n&&(!r||Array.isArray(n)?r=Q.access(e,t,G.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=G.queue(e,t),r=n.length,i=n.shift(),o=G._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,function(){G.dequeue(e,t)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Q.get(e,n)||Q.access(e,n,{empty:G.Callbacks("once memory").add(function(){Q.remove(e,[t+"queue",n])})})}}),G.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?G.queue(this[0],t):void 0===n?this:this.each(function(){var e=G.queue(this,t,n);G._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&G.dequeue(this,t)})},dequeue:function(e){return this.each(function(){G.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){function n(){--i||o.resolveWith(a,[a])}var r,i=1,o=G.Deferred(),a=this,s=this.length;for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(r=Q.get(a[s],e+"queueHooks"))&&r.empty&&(i++,r.empty.add(n));return n(),o.promise(t)}});var ee=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,te=new RegExp("^(?:([+-])=|)("+ee+")([a-z%]*)$","i"),ne=["Top","Right","Bottom","Left"],re=M.documentElement,ie=function(e){return G.contains(e.ownerDocument,e)},oe={composed:!0};re.getRootNode&&(ie=function(e){return G.contains(e.ownerDocument,e)||e.getRootNode(oe)===e.ownerDocument});function ae(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];for(o in i=n.apply(e,r||[]),t)e.style[o]=a[o];return i}var se=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&ie(e)&&"none"===G.css(e,"display")};function le(e,t,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return G.css(e,t,"")},l=s(),u=n&&n[3]||(G.cssNumber[t]?"":"px"),c=e.nodeType&&(G.cssNumber[t]||"px"!==u&&+l)&&te.exec(G.css(e,t));if(c&&c[3]!==u){for(l/=2,u=u||c[3],c=+l||1;a--;)G.style(e,t,c+u),(1-o)*(1-(o=s()/l||.5))<=0&&(a=0),c/=o;c*=2,G.style(e,t,c+u),n=n||[]}return n&&(c=+c||+l||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=u,r.start=c,r.end=i)),i}var ue={};function ce(e,t){for(var n,r,i,o,a,s,l,u=[],c=0,d=e.length;c<d;c++)(r=e[c]).style&&(n=r.style.display,t?("none"===n&&(u[c]=Q.get(r,"display")||null,u[c]||(r.style.display="")),""===r.style.display&&se(r)&&(u[c]=(l=a=o=void 0,a=(i=r).ownerDocument,s=i.nodeName,(l=ue[s])||(o=a.body.appendChild(a.createElement(s)),l=G.css(o,"display"),o.parentNode.removeChild(o),"none"===l&&(l="block"),ue[s]=l)))):"none"!==n&&(u[c]="none",Q.set(r,"display",n)));for(c=0;c<d;c++)null!=u[c]&&(e[c].style.display=u[c]);return e}G.fn.extend({show:function(){return ce(this,!0)},hide:function(){return ce(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){se(this)?G(this).show():G(this).hide()})}});var de=/^(?:checkbox|radio)$/i,fe=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,pe=/^$|^module$|\/(?:java|ecma)script/i,Te={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function he(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&H(e,t)?G.merge([e],n):n}function Se(e,t){for(var n=0,r=e.length;n<r;n++)Q.set(e[n],"globalEval",!t||Q.get(t[n],"globalEval"))}Te.optgroup=Te.option,Te.tbody=Te.tfoot=Te.colgroup=Te.caption=Te.thead,Te.th=Te.td;var be,me,ve=/<|&#?\w+;/;function ge(e,t,n,r,i){for(var o,a,s,l,u,c,d=t.createDocumentFragment(),f=[],p=0,T=e.length;p<T;p++)if((o=e[p])||0===o)if("object"===y(o))G.merge(f,o.nodeType?[o]:o);else if(ve.test(o)){for(a=a||d.appendChild(t.createElement("div")),s=(fe.exec(o)||["",""])[1].toLowerCase(),l=Te[s]||Te._default,a.innerHTML=l[1]+G.htmlPrefilter(o)+l[2],c=l[0];c--;)a=a.lastChild;G.merge(f,a.childNodes),(a=d.firstChild).textContent=""}else f.push(t.createTextNode(o));for(d.textContent="",p=0;o=f[p++];)if(r&&-1<G.inArray(o,r))i&&i.push(o);else if(u=ie(o),a=he(d.appendChild(o),"script"),u&&Se(a),n)for(c=0;o=a[c++];)pe.test(o.type||"")&&n.push(o);return d}be=M.createDocumentFragment().appendChild(M.createElement("div")),(me=M.createElement("input")).setAttribute("type","radio"),me.setAttribute("checked","checked"),me.setAttribute("name","t"),be.appendChild(me),m.checkClone=be.cloneNode(!0).cloneNode(!0).lastChild.checked,be.innerHTML="<textarea>x</textarea>",m.noCloneChecked=!!be.cloneNode(!0).lastChild.defaultValue;var ye=/^key/,Ae=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Pe=/^([^.]*)(?:\.(.+)|)/;function Me(){return!0}function Ge(){return!1}function Ce(e,t){return e===function(){try{return M.activeElement}catch(e){}}()==("focus"===t)}function He(e,t,n,r,i,o){var a,s;if("object"===_typeof(t)){for(s in"string"!=typeof n&&(r=r||n,n=void 0),t)He(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=Ge;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return G().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=G.guid++)),e.each(function(){G.event.add(this,t,i,r,n)})}function Ee(e,i,o){o?(Q.set(e,i,!1),G.event.add(e,i,{namespace:!1,handler:function(e){var t,n,r=Q.get(this,i);if(1&e.isTrigger&&this[i]){if(r.length)(G.event.special[i]||{}).delegateType&&e.stopPropagation();else if(r=s.call(arguments),Q.set(this,i,r),t=o(this,i),this[i](),r!==(n=Q.get(this,i))||t?Q.set(this,i,!1):n={},r!==n)return e.stopImmediatePropagation(),e.preventDefault(),n.value}else r.length&&(Q.set(this,i,{value:G.event.trigger(G.extend(r[0],G.Event.prototype),r.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===Q.get(e,i)&&G.event.add(e,i,Me)}G.event={global:{},add:function(t,e,n,r,i){var o,a,s,l,u,c,d,f,p,T,h,S=Q.get(t);if(S)for(n.handler&&(n=(o=n).handler,i=o.selector),i&&G.find.matchesSelector(re,i),n.guid||(n.guid=G.guid++),(l=S.events)||(l=S.events={}),(a=S.handle)||(a=S.handle=function(e){return void 0!==G&&G.event.triggered!==e.type?G.event.dispatch.apply(t,arguments):void 0}),u=(e=(e||"").match(N)||[""]).length;u--;)p=h=(s=Pe.exec(e[u])||[])[1],T=(s[2]||"").split(".").sort(),p&&(d=G.event.special[p]||{},p=(i?d.delegateType:d.bindType)||p,d=G.event.special[p]||{},c=G.extend({type:p,origType:h,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&G.expr.match.needsContext.test(i),namespace:T.join(".")},o),(f=l[p])||((f=l[p]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(t,r,T,a)||t.addEventListener&&t.addEventListener(p,a)),d.add&&(d.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),i?f.splice(f.delegateCount++,0,c):f.push(c),G.event.global[p]=!0)},remove:function(e,t,n,r,i){var o,a,s,l,u,c,d,f,p,T,h,S=Q.hasData(e)&&Q.get(e);if(S&&(l=S.events)){for(u=(t=(t||"").match(N)||[""]).length;u--;)if(p=h=(s=Pe.exec(t[u])||[])[1],T=(s[2]||"").split(".").sort(),p){for(d=G.event.special[p]||{},f=l[p=(r?d.delegateType:d.bindType)||p]||[],s=s[2]&&new RegExp("(^|\\.)"+T.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=f.length;o--;)c=f[o],!i&&h!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(f.splice(o,1),c.selector&&f.delegateCount--,d.remove&&d.remove.call(e,c));a&&!f.length&&(d.teardown&&!1!==d.teardown.call(e,T,S.handle)||G.removeEvent(e,p,S.handle),delete l[p])}else for(p in l)G.event.remove(e,p+t[u],n,r,!0);G.isEmptyObject(l)&&Q.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,a,s=G.event.fix(e),l=new Array(arguments.length),u=(Q.get(this,"events")||{})[s.type]||[],c=G.event.special[s.type]||{};for(l[0]=s,t=1;t<arguments.length;t++)l[t]=arguments[t];if(s.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,s)){for(a=G.event.handlers.call(this,s,u),t=0;(i=a[t++])&&!s.isPropagationStopped();)for(s.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!1!==o.namespace&&!s.rnamespace.test(o.namespace)||(s.handleObj=o,s.data=o.data,void 0!==(r=((G.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,l))&&!1===(s.result=r)&&(s.preventDefault(),s.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,s),s.result}},handlers:function(e,t){var n,r,i,o,a,s=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&1<=e.button))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(o=[],a={},n=0;n<l;n++)void 0===a[i=(r=t[n]).selector+" "]&&(a[i]=r.needsContext?-1<G(i,this).index(u):G.find(i,this,null,[u]).length),a[i]&&o.push(r);o.length&&s.push({elem:u,handlers:o})}return u=this,l<t.length&&s.push({elem:u,handlers:t.slice(l)}),s},addProp:function(t,e){Object.defineProperty(G.Event.prototype,t,{enumerable:!0,configurable:!0,get:v(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[G.expando]?e:new G.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return de.test(t.type)&&t.click&&H(t,"input")&&Ee(t,"click",Me),!1},trigger:function(e){var t=this||e;return de.test(t.type)&&t.click&&H(t,"input")&&Ee(t,"click"),!0},_default:function(e){var t=e.target;return de.test(t.type)&&t.click&&H(t,"input")&&Q.get(t,"click")||H(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},G.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},G.Event=function(e,t){if(!(this instanceof G.Event))return new G.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Me:Ge,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&G.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[G.expando]=!0},G.Event.prototype={constructor:G.Event,isDefaultPrevented:Ge,isPropagationStopped:Ge,isImmediatePropagationStopped:Ge,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Me,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Me,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Me,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},G.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&ye.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Ae.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},G.event.addProp),G.each({focus:"focusin",blur:"focusout"},function(e,t){G.event.special[e]={setup:function(){return Ee(this,e,Ce),!1},trigger:function(){return Ee(this,e),!0},delegateType:t}}),G.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,i){G.event.special[e]={delegateType:i,bindType:i,handle:function(e){var t,n=e.relatedTarget,r=e.handleObj;return n&&(n===this||G.contains(this,n))||(e.type=r.origType,t=r.handler.apply(this,arguments),e.type=i),t}}}),G.fn.extend({on:function(e,t,n,r){return He(this,e,t,n,r)},one:function(e,t,n,r){return He(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,G(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"!==_typeof(e))return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Ge),this.each(function(){G.event.remove(this,e,n,t)});for(i in e)this.off(i,t,e[i]);return this}});var we=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,xe=/<script|<style|<link/i,Be=/checked\s*(?:[^=]|=\s*.checked.)/i,De=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ie(e,t){return H(e,"table")&&H(11!==t.nodeType?t:t.firstChild,"tr")&&G(e).children("tbody")[0]||e}function Le(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Ne(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function ke(e,t){var n,r,i,o,a,s,l,u;if(1===t.nodeType){if(Q.hasData(e)&&(o=Q.access(e),a=Q.set(t,o),u=o.events))for(i in delete a.handle,a.events={},u)for(n=0,r=u[i].length;n<r;n++)G.event.add(t,i,u[i][n]);z.hasData(e)&&(s=z.access(e),l=G.extend({},s),z.set(t,l))}}function Oe(n,r,i,o){r=S.apply([],r);var e,t,a,s,l,u,c=0,d=n.length,f=d-1,p=r[0],T=v(p);if(T||1<d&&"string"==typeof p&&!m.checkClone&&Be.test(p))return n.each(function(e){var t=n.eq(e);T&&(r[0]=p.call(this,e,t.html())),Oe(t,r,i,o)});if(d&&(t=(e=ge(r,n[0].ownerDocument,!1,n,o)).firstChild,1===e.childNodes.length&&(e=t),t||o)){for(s=(a=G.map(he(e,"script"),Le)).length;c<d;c++)l=e,c!==f&&(l=G.clone(l,!0,!0),s&&G.merge(a,he(l,"script"))),i.call(n[c],l,c);if(s)for(u=a[a.length-1].ownerDocument,G.map(a,Ne),c=0;c<s;c++)l=a[c],pe.test(l.type||"")&&!Q.access(l,"globalEval")&&G.contains(u,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?G._evalUrl&&!l.noModule&&G._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")}):g(l.textContent.replace(De,""),l,u))}return n}function _e(e,t,n){for(var r,i=t?G.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||G.cleanData(he(r)),r.parentNode&&(n&&ie(r)&&Se(he(r,"script")),r.parentNode.removeChild(r));return e}G.extend({htmlPrefilter:function(e){return e.replace(we,"<$1></$2>")},clone:function(e,t,n){var r,i,o,a,s,l,u,c=e.cloneNode(!0),d=ie(e);if(!(m.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||G.isXMLDoc(e)))for(a=he(c),r=0,i=(o=he(e)).length;r<i;r++)s=o[r],l=a[r],"input"===(u=l.nodeName.toLowerCase())&&de.test(s.type)?l.checked=s.checked:"input"!==u&&"textarea"!==u||(l.defaultValue=s.defaultValue);if(t)if(n)for(o=o||he(e),a=a||he(c),r=0,i=o.length;r<i;r++)ke(o[r],a[r]);else ke(e,c);return 0<(a=he(c,"script")).length&&Se(a,!d&&he(e,"script")),c},cleanData:function(e){for(var t,n,r,i=G.event.special,o=0;void 0!==(n=e[o]);o++)if(K(n)){if(t=n[Q.expando]){if(t.events)for(r in t.events)i[r]?G.event.remove(n,r):G.removeEvent(n,r,t.handle);n[Q.expando]=void 0}n[z.expando]&&(n[z.expando]=void 0)}}}),G.fn.extend({detach:function(e){return _e(this,e,!0)},remove:function(e){return _e(this,e)},text:function(e){return F(this,function(e){return void 0===e?G.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Oe(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ie(this,e).appendChild(e)})},prepend:function(){return Oe(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Ie(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Oe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Oe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(G.cleanData(he(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return G.clone(this,e,t)})},html:function(e){return F(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!xe.test(e)&&!Te[(fe.exec(e)||["",""])[1].toLowerCase()]){e=G.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(G.cleanData(he(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return Oe(this,arguments,function(e){var t=this.parentNode;G.inArray(this,n)<0&&(G.cleanData(he(this)),t&&t.replaceChild(e,this))},n)}}),G.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,a){G.fn[e]=function(e){for(var t,n=[],r=G(e),i=r.length-1,o=0;o<=i;o++)t=o===i?this:this.clone(!0),G(r[o])[a](t),l.apply(n,t.get());return this.pushStack(n)}});var Ve,Re,Xe,Fe,We,je,qe,Ue=new RegExp("^("+ee+")(?!px)[a-z%]+$","i"),Ke=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=P),t.getComputedStyle(e)},$e=new RegExp(ne.join("|"),"i");function Qe(){if(qe){je.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",qe.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",re.appendChild(je).appendChild(qe);var e=P.getComputedStyle(qe);Ve="1%"!==e.top,We=12===ze(e.marginLeft),qe.style.right="60%",Fe=36===ze(e.right),Re=36===ze(e.width),qe.style.position="absolute",Xe=12===ze(qe.offsetWidth/3),re.removeChild(je),qe=null}}function ze(e){return Math.round(parseFloat(e))}function Ye(e,t,n){var r,i,o,a,s=e.style;return(n=n||Ke(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||ie(e)||(a=G.style(e,t)),!m.pixelBoxStyles()&&Ue.test(a)&&$e.test(t)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0!==a?a+"":a}function Ze(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}je=M.createElement("div"),(qe=M.createElement("div")).style&&(qe.style.backgroundClip="content-box",qe.cloneNode(!0).style.backgroundClip="",m.clearCloneStyle="content-box"===qe.style.backgroundClip,G.extend(m,{boxSizingReliable:function(){return Qe(),Re},pixelBoxStyles:function(){return Qe(),Fe},pixelPosition:function(){return Qe(),Ve},reliableMarginLeft:function(){return Qe(),We},scrollboxSize:function(){return Qe(),Xe}}));var Je=["Webkit","Moz","ms"],et=M.createElement("div").style,tt={};function nt(e){var t=G.cssProps[e]||tt[e];return t||(e in et?e:tt[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Je.length;n--;)if((e=Je[n]+t)in et)return e}(e)||e)}var rt=/^(none|table(?!-c[ea]).+)/,it=/^--/,ot={position:"absolute",visibility:"hidden",display:"block"},at={letterSpacing:"0",fontWeight:"400"};function st(e,t,n){var r=te.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function lt(e,t,n,r,i,o){var a="width"===t?1:0,s=0,l=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(l+=G.css(e,n+ne[a],!0,i)),r?("content"===n&&(l-=G.css(e,"padding"+ne[a],!0,i)),"margin"!==n&&(l-=G.css(e,"border"+ne[a]+"Width",!0,i))):(l+=G.css(e,"padding"+ne[a],!0,i),"padding"!==n?l+=G.css(e,"border"+ne[a]+"Width",!0,i):s+=G.css(e,"border"+ne[a]+"Width",!0,i));return!r&&0<=o&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-l-s-.5))||0),l}function ut(e,t,n){var r=Ke(e),i=(!m.boxSizingReliable()||n)&&"border-box"===G.css(e,"boxSizing",!1,r),o=i,a=Ye(e,t,r),s="offset"+t[0].toUpperCase()+t.slice(1);if(Ue.test(a)){if(!n)return a;a="auto"}return(!m.boxSizingReliable()&&i||"auto"===a||!parseFloat(a)&&"inline"===G.css(e,"display",!1,r))&&e.getClientRects().length&&(i="border-box"===G.css(e,"boxSizing",!1,r),(o=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+lt(e,t,n||(i?"border":"content"),o,r,a)+"px"}function ct(e,t,n,r,i){return new ct.prototype.init(e,t,n,r,i)}G.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ye(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=U(t),l=it.test(t),u=e.style;if(l||(t=nt(s)),a=G.cssHooks[t]||G.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:u[t];"string"===(o=_typeof(n))&&(i=te.exec(n))&&i[1]&&(n=le(e,t,i),o="number"),null!=n&&n==n&&("number"!==o||l||(n+=i&&i[3]||(G.cssNumber[s]?"":"px")),m.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(l?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,r){var i,o,a,s=U(t);return it.test(t)||(t=nt(s)),(a=G.cssHooks[t]||G.cssHooks[s])&&"get"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=Ye(e,t,r)),"normal"===i&&t in at&&(i=at[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),G.each(["height","width"],function(e,l){G.cssHooks[l]={get:function(e,t,n){if(t)return!rt.test(G.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?ut(e,l,n):ae(e,ot,function(){return ut(e,l,n)})},set:function(e,t,n){var r,i=Ke(e),o=!m.scrollboxSize()&&"absolute"===i.position,a=(o||n)&&"border-box"===G.css(e,"boxSizing",!1,i),s=n?lt(e,l,n,a,i):0;return a&&o&&(s-=Math.ceil(e["offset"+l[0].toUpperCase()+l.slice(1)]-parseFloat(i[l])-lt(e,l,"border",!1,i)-.5)),s&&(r=te.exec(t))&&"px"!==(r[3]||"px")&&(e.style[l]=t,t=G.css(e,l)),st(0,t,s)}}}),G.cssHooks.marginLeft=Ze(m.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Ye(e,"marginLeft"))||e.getBoundingClientRect().left-ae(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),G.each({margin:"",padding:"",border:"Width"},function(i,o){G.cssHooks[i+o]={expand:function(e){for(var t=0,n={},r="string"==typeof e?e.split(" "):[e];t<4;t++)n[i+ne[t]+o]=r[t]||r[t-2]||r[0];return n}},"margin"!==i&&(G.cssHooks[i+o].set=st)}),G.fn.extend({css:function(e,t){return F(this,function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=Ke(e),i=t.length;a<i;a++)o[t[a]]=G.css(e,t[a],!1,r);return o}return void 0!==n?G.style(e,t,n):G.css(e,t)},e,t,1<arguments.length)}}),((G.Tween=ct).prototype={constructor:ct,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||G.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(G.cssNumber[n]?"":"px")},cur:function(){var e=ct.propHooks[this.prop];return e&&e.get?e.get(this):ct.propHooks._default.get(this)},run:function(e){var t,n=ct.propHooks[this.prop];return this.options.duration?this.pos=t=G.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ct.propHooks._default.set(this),this}}).init.prototype=ct.prototype,(ct.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=G.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){G.fx.step[e.prop]?G.fx.step[e.prop](e):1!==e.elem.nodeType||!G.cssHooks[e.prop]&&null==e.elem.style[nt(e.prop)]?e.elem[e.prop]=e.now:G.style(e.elem,e.prop,e.now+e.unit)}}}).scrollTop=ct.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},G.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},G.fx=ct.prototype.init,G.fx.step={};var dt,ft,pt,Tt,ht=/^(?:toggle|show|hide)$/,St=/queueHooks$/;function bt(){ft&&(!1===M.hidden&&P.requestAnimationFrame?P.requestAnimationFrame(bt):P.setTimeout(bt,G.fx.interval),G.fx.tick())}function mt(){return P.setTimeout(function(){dt=void 0}),dt=Date.now()}function vt(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=ne[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function gt(e,t,n){for(var r,i=(yt.tweeners[t]||[]).concat(yt.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,t,e))return r}function yt(o,e,t){var n,a,r=0,i=yt.prefilters.length,s=G.Deferred().always(function(){delete l.elem}),l=function(){if(a)return!1;for(var e=dt||mt(),t=Math.max(0,u.startTime+u.duration-e),n=1-(t/u.duration||0),r=0,i=u.tweens.length;r<i;r++)u.tweens[r].run(n);return s.notifyWith(o,[u,n,t]),n<1&&i?t:(i||s.notifyWith(o,[u,1,0]),s.resolveWith(o,[u]),!1)},u=s.promise({elem:o,props:G.extend({},e),opts:G.extend(!0,{specialEasing:{},easing:G.easing._default},t),originalProperties:e,originalOptions:t,startTime:dt||mt(),duration:t.duration,tweens:[],createTween:function(e,t){var n=G.Tween(o,u.opts,e,t,u.opts.specialEasing[e]||u.opts.easing);return u.tweens.push(n),n},stop:function(e){var t=0,n=e?u.tweens.length:0;if(a)return this;for(a=!0;t<n;t++)u.tweens[t].run(1);return e?(s.notifyWith(o,[u,1,0]),s.resolveWith(o,[u,e])):s.rejectWith(o,[u,e]),this}}),c=u.props;for(!function(e,t){var n,r,i,o,a;for(n in e)if(i=t[r=U(n)],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(a=G.cssHooks[r])&&"expand"in a)for(n in o=a.expand(o),delete e[r],o)n in e||(e[n]=o[n],t[n]=i);else t[r]=i}(c,u.opts.specialEasing);r<i;r++)if(n=yt.prefilters[r].call(u,o,c,u.opts))return v(n.stop)&&(G._queueHooks(u.elem,u.opts.queue).stop=n.stop.bind(n)),n;return G.map(c,gt,u),v(u.opts.start)&&u.opts.start.call(o,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),G.fx.timer(G.extend(l,{elem:o,anim:u,queue:u.opts.queue})),u}G.Animation=G.extend(yt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return le(n.elem,e,te.exec(t),n),n}]},tweener:function(e,t){for(var n,r=0,i=(e=v(e)?(t=e,["*"]):e.match(N)).length;r<i;r++)n=e[r],yt.tweeners[n]=yt.tweeners[n]||[],yt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,o,a,s,l,u,c,d="width"in t||"height"in t,f=this,p={},T=e.style,h=e.nodeType&&se(e),S=Q.get(e,"fxshow");for(r in n.queue||(null==(a=G._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,f.always(function(){f.always(function(){a.unqueued--,G.queue(e,"fx").length||a.empty.fire()})})),t)if(i=t[r],ht.test(i)){if(delete t[r],o=o||"toggle"===i,i===(h?"hide":"show")){if("show"!==i||!S||void 0===S[r])continue;h=!0}p[r]=S&&S[r]||G.style(e,r)}if((l=!G.isEmptyObject(t))||!G.isEmptyObject(p))for(r in d&&1===e.nodeType&&(n.overflow=[T.overflow,T.overflowX,T.overflowY],null==(u=S&&S.display)&&(u=Q.get(e,"display")),"none"===(c=G.css(e,"display"))&&(u?c=u:(ce([e],!0),u=e.style.display||u,c=G.css(e,"display"),ce([e]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===G.css(e,"float")&&(l||(f.done(function(){T.display=u}),null==u&&(c=T.display,u="none"===c?"":c)),T.display="inline-block")),n.overflow&&(T.overflow="hidden",f.always(function(){T.overflow=n.overflow[0],T.overflowX=n.overflow[1],T.overflowY=n.overflow[2]})),l=!1,p)l||(S?"hidden"in S&&(h=S.hidden):S=Q.access(e,"fxshow",{display:u}),o&&(S.hidden=!h),h&&ce([e],!0),f.done(function(){for(r in h||ce([e]),Q.remove(e,"fxshow"),p)G.style(e,r,p[r])})),l=gt(h?S[r]:0,r,f),r in S||(S[r]=l.start,h&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?yt.prefilters.unshift(e):yt.prefilters.push(e)}}),G.speed=function(e,t,n){var r=e&&"object"===_typeof(e)?G.extend({},e):{complete:n||!n&&t||v(e)&&e,duration:e,easing:n&&t||t&&!v(t)&&t};return G.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in G.fx.speeds?r.duration=G.fx.speeds[r.duration]:r.duration=G.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){v(r.old)&&r.old.call(this),r.queue&&G.dequeue(this,r.queue)},r},G.fn.extend({fadeTo:function(e,t,n,r){return this.filter(se).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(t,e,n,r){function i(){var e=yt(this,G.extend({},t),a);(o||Q.get(this,"finish"))&&e.stop(!0)}var o=G.isEmptyObject(t),a=G.speed(e,n,r);return i.finish=i,o||!1===a.queue?this.each(i):this.queue(a.queue,i)},stop:function(i,e,o){function a(e){var t=e.stop;delete e.stop,t(o)}return"string"!=typeof i&&(o=e,e=i,i=void 0),e&&!1!==i&&this.queue(i||"fx",[]),this.each(function(){var e=!0,t=null!=i&&i+"queueHooks",n=G.timers,r=Q.get(this);if(t)r[t]&&r[t].stop&&a(r[t]);else for(t in r)r[t]&&r[t].stop&&St.test(t)&&a(r[t]);for(t=n.length;t--;)n[t].elem!==this||null!=i&&n[t].queue!==i||(n[t].anim.stop(o),e=!1,n.splice(t,1));!e&&o||G.dequeue(this,i)})},finish:function(a){return!1!==a&&(a=a||"fx"),this.each(function(){var e,t=Q.get(this),n=t[a+"queue"],r=t[a+"queueHooks"],i=G.timers,o=n?n.length:0;for(t.finish=!0,G.queue(this,a,[]),r&&r.stop&&r.stop.call(this,!0),e=i.length;e--;)i[e].elem===this&&i[e].queue===a&&(i[e].anim.stop(!0),i.splice(e,1));for(e=0;e<o;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete t.finish})}}),G.each(["toggle","show","hide"],function(e,r){var i=G.fn[r];G.fn[r]=function(e,t,n){return null==e||"boolean"==typeof e?i.apply(this,arguments):this.animate(vt(r,!0),e,t,n)}}),G.each({slideDown:vt("show"),slideUp:vt("hide"),slideToggle:vt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,r){G.fn[e]=function(e,t,n){return this.animate(r,e,t,n)}}),G.timers=[],G.fx.tick=function(){var e,t=0,n=G.timers;for(dt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||G.fx.stop(),dt=void 0},G.fx.timer=function(e){G.timers.push(e),G.fx.start()},G.fx.interval=13,G.fx.start=function(){ft||(ft=!0,bt())},G.fx.stop=function(){ft=null},G.fx.speeds={slow:600,fast:200,_default:400},G.fn.delay=function(r,e){return r=G.fx&&G.fx.speeds[r]||r,e=e||"fx",this.queue(e,function(e,t){var n=P.setTimeout(e,r);t.stop=function(){P.clearTimeout(n)}})},pt=M.createElement("input"),Tt=M.createElement("select").appendChild(M.createElement("option")),pt.type="checkbox",m.checkOn=""!==pt.value,m.optSelected=Tt.selected,(pt=M.createElement("input")).value="t",pt.type="radio",m.radioValue="t"===pt.value;var At,Pt=G.expr.attrHandle;G.fn.extend({attr:function(e,t){return F(this,G.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){G.removeAttr(this,e)})}}),G.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?G.prop(e,t,n):(1===o&&G.isXMLDoc(e)||(i=G.attrHooks[t.toLowerCase()]||(G.expr.match.bool.test(t)?At:void 0)),void 0!==n?null===n?void G.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):!(i&&"get"in i&&null!==(r=i.get(e,t)))&&null==(r=G.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!m.radioValue&&"radio"===t&&H(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(N);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),At={set:function(e,t,n){return!1===t?G.removeAttr(e,n):e.setAttribute(n,n),n}},G.each(G.expr.match.bool.source.match(/\w+/g),function(e,t){var a=Pt[t]||G.find.attr;Pt[t]=function(e,t,n){var r,i,o=t.toLowerCase();return n||(i=Pt[o],Pt[o]=r,r=null!=a(e,t,n)?o:null,Pt[o]=i),r}});var Mt=/^(?:input|select|textarea|button)$/i,Gt=/^(?:a|area)$/i;function Ct(e){return(e.match(N)||[]).join(" ")}function Ht(e){return e.getAttribute&&e.getAttribute("class")||""}function Et(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(N)||[]}G.fn.extend({prop:function(e,t){return F(this,G.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[G.propFix[e]||e]})}}),G.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&G.isXMLDoc(e)||(t=G.propFix[t]||t,i=G.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=G.find.attr(e,"tabindex");return t?parseInt(t,10):Mt.test(e.nodeName)||Gt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),m.optSelected||(G.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),G.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){G.propFix[this.toLowerCase()]=this}),G.fn.extend({addClass:function(t){var e,n,r,i,o,a,s,l=0;if(v(t))return this.each(function(e){G(this).addClass(t.call(this,e,Ht(this)))});if((e=Et(t)).length)for(;n=this[l++];)if(i=Ht(n),r=1===n.nodeType&&" "+Ct(i)+" "){for(a=0;o=e[a++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(s=Ct(r))&&n.setAttribute("class",s)}return this},removeClass:function(t){var e,n,r,i,o,a,s,l=0;if(v(t))return this.each(function(e){G(this).removeClass(t.call(this,e,Ht(this)))});if(!arguments.length)return this.attr("class","");if((e=Et(t)).length)for(;n=this[l++];)if(i=Ht(n),r=1===n.nodeType&&" "+Ct(i)+" "){for(a=0;o=e[a++];)for(;-1<r.indexOf(" "+o+" ");)r=r.replace(" "+o+" "," ");i!==(s=Ct(r))&&n.setAttribute("class",s)}return this},toggleClass:function(i,t){var o=_typeof(i),a="string"===o||Array.isArray(i);return"boolean"==typeof t&&a?t?this.addClass(i):this.removeClass(i):v(i)?this.each(function(e){G(this).toggleClass(i.call(this,e,Ht(this),t),t)}):this.each(function(){var e,t,n,r;if(a)for(t=0,n=G(this),r=Et(i);e=r[t++];)n.hasClass(e)?n.removeClass(e):n.addClass(e);else void 0!==i&&"boolean"!==o||((e=Ht(this))&&Q.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",!e&&!1!==i&&Q.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&-1<(" "+Ct(Ht(n))+" ").indexOf(t))return!0;return!1}});var wt=/\r/g;G.fn.extend({val:function(n){var r,e,i,t=this[0];return arguments.length?(i=v(n),this.each(function(e){var t;1===this.nodeType&&(null==(t=i?n.call(this,e,G(this).val()):n)?t="":"number"==typeof t?t+="":Array.isArray(t)&&(t=G.map(t,function(e){return null==e?"":e+""})),(r=G.valHooks[this.type]||G.valHooks[this.nodeName.toLowerCase()])&&"set"in r&&void 0!==r.set(this,t,"value")||(this.value=t))})):t?(r=G.valHooks[t.type]||G.valHooks[t.nodeName.toLowerCase()])&&"get"in r&&void 0!==(e=r.get(t,"value"))?e:"string"==typeof(e=t.value)?e.replace(wt,""):null==e?"":e:void 0}}),G.extend({valHooks:{option:{get:function(e){var t=G.find.attr(e,"value");return null!=t?t:Ct(G.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],l=a?o+1:i.length;for(r=o<0?l:a?o:0;r<l;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!H(n.parentNode,"optgroup"))){if(t=G(n).val(),a)return t;s.push(t)}return s},set:function(e,t){for(var n,r,i=e.options,o=G.makeArray(t),a=i.length;a--;)((r=i[a]).selected=-1<G.inArray(G.valHooks.option.get(r),o))&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),G.each(["radio","checkbox"],function(){G.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<G.inArray(G(e).val(),t)}},m.checkOn||(G.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),m.focusin="onfocusin"in P;function xt(e){e.stopPropagation()}var Bt=/^(?:focusinfocus|focusoutblur)$/;G.extend(G.event,{trigger:function(e,t,n,r){var i,o,a,s,l,u,c,d,f=[n||M],p=b.call(e,"type")?e.type:e,T=b.call(e,"namespace")?e.namespace.split("."):[];if(o=d=a=n=n||M,3!==n.nodeType&&8!==n.nodeType&&!Bt.test(p+G.event.triggered)&&(-1<p.indexOf(".")&&(p=(T=p.split(".")).shift(),T.sort()),l=p.indexOf(":")<0&&"on"+p,(e=e[G.expando]?e:new G.Event(p,"object"===_typeof(e)&&e)).isTrigger=r?2:3,e.namespace=T.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+T.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:G.makeArray(t,[e]),c=G.event.special[p]||{},r||!c.trigger||!1!==c.trigger.apply(n,t))){if(!r&&!c.noBubble&&!h(n)){for(s=c.delegateType||p,Bt.test(s+p)||(o=o.parentNode);o;o=o.parentNode)f.push(o),a=o;a===(n.ownerDocument||M)&&f.push(a.defaultView||a.parentWindow||P)}for(i=0;(o=f[i++])&&!e.isPropagationStopped();)d=o,e.type=1<i?s:c.bindType||p,(u=(Q.get(o,"events")||{})[e.type]&&Q.get(o,"handle"))&&u.apply(o,t),(u=l&&o[l])&&u.apply&&K(o)&&(e.result=u.apply(o,t),!1===e.result&&e.preventDefault());return e.type=p,r||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(f.pop(),t)||!K(n)||l&&v(n[p])&&!h(n)&&((a=n[l])&&(n[l]=null),G.event.triggered=p,e.isPropagationStopped()&&d.addEventListener(p,xt),n[p](),e.isPropagationStopped()&&d.removeEventListener(p,xt),G.event.triggered=void 0,a&&(n[l]=a)),e.result}},simulate:function(e,t,n){var r=G.extend(new G.Event,n,{type:e,isSimulated:!0});G.event.trigger(r,null,t)}}),G.fn.extend({trigger:function(e,t){return this.each(function(){G.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return G.event.trigger(e,t,n,!0)}}),m.focusin||G.each({focus:"focusin",blur:"focusout"},function(n,r){function i(e){G.event.simulate(r,e.target,G.event.fix(e))}G.event.special[r]={setup:function(){var e=this.ownerDocument||this,t=Q.access(e,r);t||e.addEventListener(n,i,!0),Q.access(e,r,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this,t=Q.access(e,r)-1;t?Q.access(e,r,t):(e.removeEventListener(n,i,!0),Q.remove(e,r))}}});var Dt=P.location,It=Date.now(),Lt=/\?/;G.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new P.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||G.error("Invalid XML: "+e),t};var Nt=/\[\]$/,kt=/\r?\n/g,Ot=/^(?:submit|button|image|reset|file)$/i,_t=/^(?:input|select|textarea|keygen)/i;function Vt(n,e,r,i){var t;if(Array.isArray(e))G.each(e,function(e,t){r||Nt.test(n)?i(n,t):Vt(n+"["+("object"===_typeof(t)&&null!=t?e:"")+"]",t,r,i)});else if(r||"object"!==y(e))i(n,e);else for(t in e)Vt(n+"["+t+"]",e[t],r,i)}G.param=function(e,t){function n(e,t){var n=v(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)}var r,i=[];if(null==e)return"";if(Array.isArray(e)||e.jquery&&!G.isPlainObject(e))G.each(e,function(){n(this.name,this.value)});else for(r in e)Vt(r,e[r],t,n);return i.join("&")},G.fn.extend({serialize:function(){return G.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=G.prop(this,"elements");return e?G.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!G(this).is(":disabled")&&_t.test(this.nodeName)&&!Ot.test(e)&&(this.checked||!de.test(e))}).map(function(e,t){var n=G(this).val();return null==n?null:Array.isArray(n)?G.map(n,function(e){return{name:t.name,value:e.replace(kt,"\r\n")}}):{name:t.name,value:n.replace(kt,"\r\n")}}).get()}});var Rt=/%20/g,Xt=/#.*$/,Ft=/([?&])_=[^&]*/,Wt=/^(.*?):[ \t]*([^\r\n]*)$/gm,jt=/^(?:GET|HEAD)$/,qt=/^\/\//,Ut={},Kt={},$t="*/".concat("*"),Qt=M.createElement("a");function zt(o){return function(e,t){"string"!=typeof e&&(t=e,e="*");var n,r=0,i=e.toLowerCase().match(N)||[];if(v(t))for(;n=i[r++];)"+"===n[0]?(n=n.slice(1)||"*",(o[n]=o[n]||[]).unshift(t)):(o[n]=o[n]||[]).push(t)}}function Yt(t,i,o,a){var s={},l=t===Kt;function u(e){var r;return s[e]=!0,G.each(t[e]||[],function(e,t){var n=t(i,o,a);return"string"!=typeof n||l||s[n]?l?!(r=n):void 0:(i.dataTypes.unshift(n),u(n),!1)}),r}return u(i.dataTypes[0])||!s["*"]&&u("*")}function Zt(e,t){var n,r,i=G.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r=r||{})[n]=t[n]);return r&&G.extend(!0,e,r),e}Qt.href=Dt.href,G.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Dt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Dt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":$t,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":G.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Zt(Zt(e,G.ajaxSettings),t):Zt(G.ajaxSettings,e)},ajaxPrefilter:zt(Ut),ajaxTransport:zt(Kt),ajax:function(e,t){"object"===_typeof(e)&&(t=e,e=void 0),t=t||{};var c,d,f,n,p,r,T,h,i,o,S=G.ajaxSetup({},t),b=S.context||S,m=S.context&&(b.nodeType||b.jquery)?G(b):G.event,v=G.Deferred(),g=G.Callbacks("once memory"),y=S.statusCode||{},a={},s={},l="canceled",A={readyState:0,getResponseHeader:function(e){var t;if(T){if(!n)for(n={};t=Wt.exec(f);)n[t[1].toLowerCase()+" "]=(n[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=n[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return T?f:null},setRequestHeader:function(e,t){return null==T&&(e=s[e.toLowerCase()]=s[e.toLowerCase()]||e,a[e]=t),this},overrideMimeType:function(e){return null==T&&(S.mimeType=e),this},statusCode:function(e){var t;if(e)if(T)A.always(e[A.status]);else for(t in e)y[t]=[y[t],e[t]];return this},abort:function(e){var t=e||l;return c&&c.abort(t),u(0,t),this}};if(v.promise(A),S.url=((e||S.url||Dt.href)+"").replace(qt,Dt.protocol+"//"),S.type=t.method||t.type||S.method||S.type,S.dataTypes=(S.dataType||"*").toLowerCase().match(N)||[""],null==S.crossDomain){r=M.createElement("a");try{r.href=S.url,r.href=r.href,S.crossDomain=Qt.protocol+"//"+Qt.host!=r.protocol+"//"+r.host}catch(e){S.crossDomain=!0}}if(S.data&&S.processData&&"string"!=typeof S.data&&(S.data=G.param(S.data,S.traditional)),Yt(Ut,S,t,A),T)return A;for(i in(h=G.event&&S.global)&&0==G.active++&&G.event.trigger("ajaxStart"),S.type=S.type.toUpperCase(),S.hasContent=!jt.test(S.type),d=S.url.replace(Xt,""),S.hasContent?S.data&&S.processData&&0===(S.contentType||"").indexOf("application/x-www-form-urlencoded")&&(S.data=S.data.replace(Rt,"+")):(o=S.url.slice(d.length),S.data&&(S.processData||"string"==typeof S.data)&&(d+=(Lt.test(d)?"&":"?")+S.data,delete S.data),!1===S.cache&&(d=d.replace(Ft,"$1"),o=(Lt.test(d)?"&":"?")+"_="+It+++o),S.url=d+o),S.ifModified&&(G.lastModified[d]&&A.setRequestHeader("If-Modified-Since",G.lastModified[d]),G.etag[d]&&A.setRequestHeader("If-None-Match",G.etag[d])),(S.data&&S.hasContent&&!1!==S.contentType||t.contentType)&&A.setRequestHeader("Content-Type",S.contentType),A.setRequestHeader("Accept",S.dataTypes[0]&&S.accepts[S.dataTypes[0]]?S.accepts[S.dataTypes[0]]+("*"!==S.dataTypes[0]?", "+$t+"; q=0.01":""):S.accepts["*"]),S.headers)A.setRequestHeader(i,S.headers[i]);if(S.beforeSend&&(!1===S.beforeSend.call(b,A,S)||T))return A.abort();if(l="abort",g.add(S.complete),A.done(S.success),A.fail(S.error),c=Yt(Kt,S,t,A)){if(A.readyState=1,h&&m.trigger("ajaxSend",[A,S]),T)return A;S.async&&0<S.timeout&&(p=P.setTimeout(function(){A.abort("timeout")},S.timeout));try{T=!1,c.send(a,u)}catch(e){if(T)throw e;u(-1,e)}}else u(-1,"No Transport");function u(e,t,n,r){var i,o,a,s,l,u=t;T||(T=!0,p&&P.clearTimeout(p),c=void 0,f=r||"",A.readyState=0<e?4:0,i=200<=e&&e<300||304===e,n&&(s=function(e,t,n){for(var r,i,o,a,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){l.unshift(i);break}if(l[0]in n)o=l[0];else{for(i in n){if(!l[0]||e.converters[i+" "+l[0]]){o=i;break}a=a||i}o=o||a}if(o)return o!==l[0]&&l.unshift(o),n[o]}(S,A,n)),s=function(e,t,n,r){var i,o,a,s,l,u={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)u[a.toLowerCase()]=e.converters[a];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(a=u[l+" "+o]||u["* "+o]))for(i in u)if((s=i.split(" "))[1]===o&&(a=u[l+" "+s[0]]||u["* "+s[0]])){!0===a?a=u[i]:!0!==u[i]&&(o=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}(S,s,A,i),i?(S.ifModified&&((l=A.getResponseHeader("Last-Modified"))&&(G.lastModified[d]=l),(l=A.getResponseHeader("etag"))&&(G.etag[d]=l)),204===e||"HEAD"===S.type?u="nocontent":304===e?u="notmodified":(u=s.state,o=s.data,i=!(a=s.error))):(a=u,!e&&u||(u="error",e<0&&(e=0))),A.status=e,A.statusText=(t||u)+"",i?v.resolveWith(b,[o,u,A]):v.rejectWith(b,[A,u,a]),A.statusCode(y),y=void 0,h&&m.trigger(i?"ajaxSuccess":"ajaxError",[A,S,i?o:a]),g.fireWith(b,[A,u]),h&&(m.trigger("ajaxComplete",[A,S]),--G.active||G.event.trigger("ajaxStop")))}return A},getJSON:function(e,t,n){return G.get(e,t,n,"json")},getScript:function(e,t){return G.get(e,void 0,t,"script")}}),G.each(["get","post"],function(e,i){G[i]=function(e,t,n,r){return v(t)&&(r=r||n,n=t,t=void 0),G.ajax(G.extend({url:e,type:i,dataType:r,data:t,success:n},G.isPlainObject(e)&&e))}}),G._evalUrl=function(e,t){return G.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){G.globalEval(e,t)}})},G.fn.extend({wrapAll:function(e){var t;return this[0]&&(v(e)&&(e=e.call(this[0])),t=G(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return v(n)?this.each(function(e){G(this).wrapInner(n.call(this,e))}):this.each(function(){var e=G(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=v(t);return this.each(function(e){G(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){G(this).replaceWith(this.childNodes)}),this}}),G.expr.pseudos.hidden=function(e){return!G.expr.pseudos.visible(e)},G.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},G.ajaxSettings.xhr=function(){try{return new P.XMLHttpRequest}catch(e){}};var Jt={0:200,1223:204},en=G.ajaxSettings.xhr();m.cors=!!en&&"withCredentials"in en,m.ajax=en=!!en,G.ajaxTransport(function(i){var o,a;if(m.cors||en&&!i.crossDomain)return{send:function(e,t){var n,r=i.xhr();if(r.open(i.type,i.url,i.async,i.username,i.password),i.xhrFields)for(n in i.xhrFields)r[n]=i.xhrFields[n];for(n in i.mimeType&&r.overrideMimeType&&r.overrideMimeType(i.mimeType),i.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)r.setRequestHeader(n,e[n]);o=function(e){return function(){o&&(o=a=r.onload=r.onerror=r.onabort=r.ontimeout=r.onreadystatechange=null,"abort"===e?r.abort():"error"===e?"number"!=typeof r.status?t(0,"error"):t(r.status,r.statusText):t(Jt[r.status]||r.status,r.statusText,"text"!==(r.responseType||"text")||"string"!=typeof r.responseText?{binary:r.response}:{text:r.responseText},r.getAllResponseHeaders()))}},r.onload=o(),a=r.onerror=r.ontimeout=o("error"),void 0!==r.onabort?r.onabort=a:r.onreadystatechange=function(){4===r.readyState&&P.setTimeout(function(){o&&a()})},o=o("abort");try{r.send(i.hasContent&&i.data||null)}catch(e){if(o)throw e}},abort:function(){o&&o()}}}),G.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),G.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return G.globalEval(e),e}}}),G.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),G.ajaxTransport("script",function(n){var r,i;if(n.crossDomain||n.scriptAttrs)return{send:function(e,t){r=G("<script>").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on("load error",i=function(e){r.remove(),i=null,e&&t("error"===e.type?404:200,e.type)}),M.head.appendChild(r[0])},abort:function(){i&&i()}}});var tn,nn=[],rn=/(=)\?(?=&|$)|\?\?/;G.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=nn.pop()||G.expando+"_"+It++;return this[e]=!0,e}}),G.ajaxPrefilter("json jsonp",function(e,t,n){var r,i,o,a=!1!==e.jsonp&&(rn.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&rn.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=v(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(rn,"$1"+r):!1!==e.jsonp&&(e.url+=(Lt.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return o||G.error(r+" was not called"),o[0]},e.dataTypes[0]="json",i=P[r],P[r]=function(){o=arguments},n.always(function(){void 0===i?G(P).removeProp(r):P[r]=i,e[r]&&(e.jsonpCallback=t.jsonpCallback,nn.push(r)),o&&v(i)&&i(o[0]),o=i=void 0}),"script"}),m.createHTMLDocument=((tn=M.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===tn.childNodes.length),G.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(m.createHTMLDocument?((r=(t=M.implementation.createHTMLDocument("")).createElement("base")).href=M.location.href,t.head.appendChild(r)):t=M),o=!n&&[],(i=E.exec(e))?[t.createElement(i[1])]:(i=ge([e],t,o),o&&o.length&&G(o).remove(),G.merge([],i.childNodes)));var r,i,o},G.fn.load=function(e,t,n){var r,i,o,a=this,s=e.indexOf(" ");return-1<s&&(r=Ct(e.slice(s)),e=e.slice(0,s)),v(t)?(n=t,t=void 0):t&&"object"===_typeof(t)&&(i="POST"),0<a.length&&G.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(r?G("<div>").append(G.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},G.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){G.fn[t]=function(e){return this.on(t,e)}}),G.expr.pseudos.animated=function(t){return G.grep(G.timers,function(e){return t===e.elem}).length},G.offset={setOffset:function(e,t,n){var r,i,o,a,s,l,u=G.css(e,"position"),c=G(e),d={};"static"===u&&(e.style.position="relative"),s=c.offset(),o=G.css(e,"top"),l=G.css(e,"left"),i=("absolute"===u||"fixed"===u)&&-1<(o+l).indexOf("auto")?(a=(r=c.position()).top,r.left):(a=parseFloat(o)||0,parseFloat(l)||0),v(t)&&(t=t.call(e,n,G.extend({},s))),null!=t.top&&(d.top=t.top-s.top+a),null!=t.left&&(d.left=t.left-s.left+i),"using"in t?t.using.call(e,d):c.css(d)}},G.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){G.offset.setOffset(this,t,e)});var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===G.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===G.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=G(e).offset()).top+=G.css(e,"borderTopWidth",!0),i.left+=G.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-G.css(r,"marginTop",!0),left:t.left-i.left-G.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===G.css(e,"position");)e=e.offsetParent;return e||re})}}),G.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,i){var o="pageYOffset"===i;G.fn[t]=function(e){return F(this,function(e,t,n){var r;if(h(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===n)return r?r[i]:e[t];r?r.scrollTo(o?r.pageXOffset:n,o?n:r.pageYOffset):e[t]=n},t,e,arguments.length)}}),G.each(["top","left"],function(e,n){G.cssHooks[n]=Ze(m.pixelPosition,function(e,t){if(t)return t=Ye(e,n),Ue.test(t)?G(e).position()[n]+"px":t})}),G.each({Height:"height",Width:"width"},function(a,s){G.each({padding:"inner"+a,content:s,"":"outer"+a},function(r,o){G.fn[o]=function(e,t){var n=arguments.length&&(r||"boolean"!=typeof e),i=r||(!0===e||!0===t?"margin":"border");return F(this,function(e,t,n){var r;return h(e)?0===o.indexOf("outer")?e["inner"+a]:e.document.documentElement["client"+a]:9===e.nodeType?(r=e.documentElement,Math.max(e.body["scroll"+a],r["scroll"+a],e.body["offset"+a],r["offset"+a],r["client"+a])):void 0===n?G.css(e,t,i):G.style(e,t,n,i)},s,n?e:void 0,n)}})}),G.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,n){G.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}}),G.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),G.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),G.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),v(e))return r=s.call(arguments,2),(i=function(){return e.apply(t||this,r.concat(s.call(arguments)))}).guid=e.guid=e.guid||G.guid++,i},G.holdReady=function(e){e?G.readyWait++:G.ready(!0)},G.isArray=Array.isArray,G.parseJSON=JSON.parse,G.nodeName=H,G.isFunction=v,G.isWindow=h,G.camelCase=U,G.type=y,G.now=Date.now,G.isNumeric=function(e){var t=G.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},"function"==typeof define&&define.amd&&define("jquery",[],function(){return G});var on=P.jQuery,an=P.$;return G.noConflict=function(e){return P.$===G&&(P.$=an),e&&P.jQuery===G&&(P.jQuery=on),G},e||(P.jQuery=P.$=G),G}),function(d){(function(){if(typeof module!=="undefined"&&module.exports){return function(e){module.exports=e()}}else if(typeof define==="function"&&define.amd){return define}else if(typeof window!=="undefined"){return function(e){window.MobileDetect=e()}}else{throw new Error("unknown environment")}})()(function(){var s,l={mobileDetectRules:{phones:{iPhone:"\\biPhone\\b|\\biPod\\b",BlackBerry:"BlackBerry|\\bBB10\\b|rim[0-9]+|\\b(BBA100|BBB100|BBD100|BBE100|BBF100|STH100)\\b-[0-9]+",HTC:"HTC|HTC.*(Sensation|Evo|Vision|Explorer|6800|8100|8900|A7272|S510e|C110e|Legend|Desire|T8282)|APX515CKT|Qtek9090|APA9292KT|HD_mini|Sensation.*Z710e|PG86100|Z715e|Desire.*(A8181|HD)|ADR6200|ADR6400L|ADR6425|001HT|Inspire 4G|Android.*\\bEVO\\b|T-Mobile G1|Z520m|Android [0-9.]+; Pixel",Nexus:"Nexus One|Nexus S|Galaxy.*Nexus|Android.*Nexus.*Mobile|Nexus 4|Nexus 5|Nexus 6",Dell:"Dell[;]? (Streak|Aero|Venue|Venue Pro|Flash|Smoke|Mini 3iX)|XCD28|XCD35|\\b001DL\\b|\\b101DL\\b|\\bGS01\\b",Motorola:"Motorola|DROIDX|DROID BIONIC|\\bDroid\\b.*Build|Android.*Xoom|HRI39|MOT-|A1260|A1680|A555|A853|A855|A953|A955|A956|Motorola.*ELECTRIFY|Motorola.*i1|i867|i940|MB200|MB300|MB501|MB502|MB508|MB511|MB520|MB525|MB526|MB611|MB612|MB632|MB810|MB855|MB860|MB861|MB865|MB870|ME501|ME502|ME511|ME525|ME600|ME632|ME722|ME811|ME860|ME863|ME865|MT620|MT710|MT716|MT720|MT810|MT870|MT917|Motorola.*TITANIUM|WX435|WX445|XT300|XT301|XT311|XT316|XT317|XT319|XT320|XT390|XT502|XT530|XT531|XT532|XT535|XT603|XT610|XT611|XT615|XT681|XT701|XT702|XT711|XT720|XT800|XT806|XT860|XT862|XT875|XT882|XT883|XT894|XT901|XT907|XT909|XT910|XT912|XT928|XT926|XT915|XT919|XT925|XT1021|\\bMoto E\\b|XT1068|XT1092|XT1052",Samsung:"\\bSamsung\\b|SM-G950F|SM-G955F|SM-G9250|GT-19300|SGH-I337|BGT-S5230|GT-B2100|GT-B2700|GT-B2710|GT-B3210|GT-B3310|GT-B3410|GT-B3730|GT-B3740|GT-B5510|GT-B5512|GT-B5722|GT-B6520|GT-B7300|GT-B7320|GT-B7330|GT-B7350|GT-B7510|GT-B7722|GT-B7800|GT-C3010|GT-C3011|GT-C3060|GT-C3200|GT-C3212|GT-C3212I|GT-C3262|GT-C3222|GT-C3300|GT-C3300K|GT-C3303|GT-C3303K|GT-C3310|GT-C3322|GT-C3330|GT-C3350|GT-C3500|GT-C3510|GT-C3530|GT-C3630|GT-C3780|GT-C5010|GT-C5212|GT-C6620|GT-C6625|GT-C6712|GT-E1050|GT-E1070|GT-E1075|GT-E1080|GT-E1081|GT-E1085|GT-E1087|GT-E1100|GT-E1107|GT-E1110|GT-E1120|GT-E1125|GT-E1130|GT-E1160|GT-E1170|GT-E1175|GT-E1180|GT-E1182|GT-E1200|GT-E1210|GT-E1225|GT-E1230|GT-E1390|GT-E2100|GT-E2120|GT-E2121|GT-E2152|GT-E2220|GT-E2222|GT-E2230|GT-E2232|GT-E2250|GT-E2370|GT-E2550|GT-E2652|GT-E3210|GT-E3213|GT-I5500|GT-I5503|GT-I5700|GT-I5800|GT-I5801|GT-I6410|GT-I6420|GT-I7110|GT-I7410|GT-I7500|GT-I8000|GT-I8150|GT-I8160|GT-I8190|GT-I8320|GT-I8330|GT-I8350|GT-I8530|GT-I8700|GT-I8703|GT-I8910|GT-I9000|GT-I9001|GT-I9003|GT-I9010|GT-I9020|GT-I9023|GT-I9070|GT-I9082|GT-I9100|GT-I9103|GT-I9220|GT-I9250|GT-I9300|GT-I9305|GT-I9500|GT-I9505|GT-M3510|GT-M5650|GT-M7500|GT-M7600|GT-M7603|GT-M8800|GT-M8910|GT-N7000|GT-S3110|GT-S3310|GT-S3350|GT-S3353|GT-S3370|GT-S3650|GT-S3653|GT-S3770|GT-S3850|GT-S5210|GT-S5220|GT-S5229|GT-S5230|GT-S5233|GT-S5250|GT-S5253|GT-S5260|GT-S5263|GT-S5270|GT-S5300|GT-S5330|GT-S5350|GT-S5360|GT-S5363|GT-S5369|GT-S5380|GT-S5380D|GT-S5560|GT-S5570|GT-S5600|GT-S5603|GT-S5610|GT-S5620|GT-S5660|GT-S5670|GT-S5690|GT-S5750|GT-S5780|GT-S5830|GT-S5839|GT-S6102|GT-S6500|GT-S7070|GT-S7200|GT-S7220|GT-S7230|GT-S7233|GT-S7250|GT-S7500|GT-S7530|GT-S7550|GT-S7562|GT-S7710|GT-S8000|GT-S8003|GT-S8500|GT-S8530|GT-S8600|SCH-A310|SCH-A530|SCH-A570|SCH-A610|SCH-A630|SCH-A650|SCH-A790|SCH-A795|SCH-A850|SCH-A870|SCH-A890|SCH-A930|SCH-A950|SCH-A970|SCH-A990|SCH-I100|SCH-I110|SCH-I400|SCH-I405|SCH-I500|SCH-I510|SCH-I515|SCH-I600|SCH-I730|SCH-I760|SCH-I770|SCH-I830|SCH-I910|SCH-I920|SCH-I959|SCH-LC11|SCH-N150|SCH-N300|SCH-R100|SCH-R300|SCH-R351|SCH-R400|SCH-R410|SCH-T300|SCH-U310|SCH-U320|SCH-U350|SCH-U360|SCH-U365|SCH-U370|SCH-U380|SCH-U410|SCH-U430|SCH-U450|SCH-U460|SCH-U470|SCH-U490|SCH-U540|SCH-U550|SCH-U620|SCH-U640|SCH-U650|SCH-U660|SCH-U700|SCH-U740|SCH-U750|SCH-U810|SCH-U820|SCH-U900|SCH-U940|SCH-U960|SCS-26UC|SGH-A107|SGH-A117|SGH-A127|SGH-A137|SGH-A157|SGH-A167|SGH-A177|SGH-A187|SGH-A197|SGH-A227|SGH-A237|SGH-A257|SGH-A437|SGH-A517|SGH-A597|SGH-A637|SGH-A657|SGH-A667|SGH-A687|SGH-A697|SGH-A707|SGH-A717|SGH-A727|SGH-A737|SGH-A747|SGH-A767|SGH-A777|SGH-A797|SGH-A817|SGH-A827|SGH-A837|SGH-A847|SGH-A867|SGH-A877|SGH-A887|SGH-A897|SGH-A927|SGH-B100|SGH-B130|SGH-B200|SGH-B220|SGH-C100|SGH-C110|SGH-C120|SGH-C130|SGH-C140|SGH-C160|SGH-C170|SGH-C180|SGH-C200|SGH-C207|SGH-C210|SGH-C225|SGH-C230|SGH-C417|SGH-C450|SGH-D307|SGH-D347|SGH-D357|SGH-D407|SGH-D415|SGH-D780|SGH-D807|SGH-D980|SGH-E105|SGH-E200|SGH-E315|SGH-E316|SGH-E317|SGH-E335|SGH-E590|SGH-E635|SGH-E715|SGH-E890|SGH-F300|SGH-F480|SGH-I200|SGH-I300|SGH-I320|SGH-I550|SGH-I577|SGH-I600|SGH-I607|SGH-I617|SGH-I627|SGH-I637|SGH-I677|SGH-I700|SGH-I717|SGH-I727|SGH-i747M|SGH-I777|SGH-I780|SGH-I827|SGH-I847|SGH-I857|SGH-I896|SGH-I897|SGH-I900|SGH-I907|SGH-I917|SGH-I927|SGH-I937|SGH-I997|SGH-J150|SGH-J200|SGH-L170|SGH-L700|SGH-M110|SGH-M150|SGH-M200|SGH-N105|SGH-N500|SGH-N600|SGH-N620|SGH-N625|SGH-N700|SGH-N710|SGH-P107|SGH-P207|SGH-P300|SGH-P310|SGH-P520|SGH-P735|SGH-P777|SGH-Q105|SGH-R210|SGH-R220|SGH-R225|SGH-S105|SGH-S307|SGH-T109|SGH-T119|SGH-T139|SGH-T209|SGH-T219|SGH-T229|SGH-T239|SGH-T249|SGH-T259|SGH-T309|SGH-T319|SGH-T329|SGH-T339|SGH-T349|SGH-T359|SGH-T369|SGH-T379|SGH-T409|SGH-T429|SGH-T439|SGH-T459|SGH-T469|SGH-T479|SGH-T499|SGH-T509|SGH-T519|SGH-T539|SGH-T559|SGH-T589|SGH-T609|SGH-T619|SGH-T629|SGH-T639|SGH-T659|SGH-T669|SGH-T679|SGH-T709|SGH-T719|SGH-T729|SGH-T739|SGH-T746|SGH-T749|SGH-T759|SGH-T769|SGH-T809|SGH-T819|SGH-T839|SGH-T919|SGH-T929|SGH-T939|SGH-T959|SGH-T989|SGH-U100|SGH-U200|SGH-U800|SGH-V205|SGH-V206|SGH-X100|SGH-X105|SGH-X120|SGH-X140|SGH-X426|SGH-X427|SGH-X475|SGH-X495|SGH-X497|SGH-X507|SGH-X600|SGH-X610|SGH-X620|SGH-X630|SGH-X700|SGH-X820|SGH-X890|SGH-Z130|SGH-Z150|SGH-Z170|SGH-ZX10|SGH-ZX20|SHW-M110|SPH-A120|SPH-A400|SPH-A420|SPH-A460|SPH-A500|SPH-A560|SPH-A600|SPH-A620|SPH-A660|SPH-A700|SPH-A740|SPH-A760|SPH-A790|SPH-A800|SPH-A820|SPH-A840|SPH-A880|SPH-A900|SPH-A940|SPH-A960|SPH-D600|SPH-D700|SPH-D710|SPH-D720|SPH-I300|SPH-I325|SPH-I330|SPH-I350|SPH-I500|SPH-I600|SPH-I700|SPH-L700|SPH-M100|SPH-M220|SPH-M240|SPH-M300|SPH-M305|SPH-M320|SPH-M330|SPH-M350|SPH-M360|SPH-M370|SPH-M380|SPH-M510|SPH-M540|SPH-M550|SPH-M560|SPH-M570|SPH-M580|SPH-M610|SPH-M620|SPH-M630|SPH-M800|SPH-M810|SPH-M850|SPH-M900|SPH-M910|SPH-M920|SPH-M930|SPH-N100|SPH-N200|SPH-N240|SPH-N300|SPH-N400|SPH-Z400|SWC-E100|SCH-i909|GT-N7100|GT-N7105|SCH-I535|SM-N900A|SGH-I317|SGH-T999L|GT-S5360B|GT-I8262|GT-S6802|GT-S6312|GT-S6310|GT-S5312|GT-S5310|GT-I9105|GT-I8510|GT-S6790N|SM-G7105|SM-N9005|GT-S5301|GT-I9295|GT-I9195|SM-C101|GT-S7392|GT-S7560|GT-B7610|GT-I5510|GT-S7582|GT-S7530E|GT-I8750|SM-G9006V|SM-G9008V|SM-G9009D|SM-G900A|SM-G900D|SM-G900F|SM-G900H|SM-G900I|SM-G900J|SM-G900K|SM-G900L|SM-G900M|SM-G900P|SM-G900R4|SM-G900S|SM-G900T|SM-G900V|SM-G900W8|SHV-E160K|SCH-P709|SCH-P729|SM-T2558|GT-I9205|SM-G9350|SM-J120F|SM-G920F|SM-G920V|SM-G930F|SM-N910C|SM-A310F|GT-I9190|SM-J500FN|SM-G903F|SM-J330F",LG:"\\bLG\\b;|LG[- ]?(C800|C900|E400|E610|E900|E-900|F160|F180K|F180L|F180S|730|855|L160|LS740|LS840|LS970|LU6200|MS690|MS695|MS770|MS840|MS870|MS910|P500|P700|P705|VM696|AS680|AS695|AX840|C729|E970|GS505|272|C395|E739BK|E960|L55C|L75C|LS696|LS860|P769BK|P350|P500|P509|P870|UN272|US730|VS840|VS950|LN272|LN510|LS670|LS855|LW690|MN270|MN510|P509|P769|P930|UN200|UN270|UN510|UN610|US670|US740|US760|UX265|UX840|VN271|VN530|VS660|VS700|VS740|VS750|VS910|VS920|VS930|VX9200|VX11000|AX840A|LW770|P506|P925|P999|E612|D955|D802|MS323|M257)|LM-G710",Sony:"SonyST|SonyLT|SonyEricsson|SonyEricssonLT15iv|LT18i|E10i|LT28h|LT26w|SonyEricssonMT27i|C5303|C6902|C6903|C6906|C6943|D2533",Asus:"Asus.*Galaxy|PadFone.*Mobile",NokiaLumia:"Lumia [0-9]{3,4}",Micromax:"Micromax.*\\b(A210|A92|A88|A72|A111|A110Q|A115|A116|A110|A90S|A26|A51|A35|A54|A25|A27|A89|A68|A65|A57|A90)\\b",Palm:"PalmSource|Palm",Vertu:"Vertu|Vertu.*Ltd|Vertu.*Ascent|Vertu.*Ayxta|Vertu.*Constellation(F|Quest)?|Vertu.*Monika|Vertu.*Signature",Pantech:"PANTECH|IM-A850S|IM-A840S|IM-A830L|IM-A830K|IM-A830S|IM-A820L|IM-A810K|IM-A810S|IM-A800S|IM-T100K|IM-A725L|IM-A780L|IM-A775C|IM-A770K|IM-A760S|IM-A750K|IM-A740S|IM-A730S|IM-A720L|IM-A710K|IM-A690L|IM-A690S|IM-A650S|IM-A630K|IM-A600S|VEGA PTL21|PT003|P8010|ADR910L|P6030|P6020|P9070|P4100|P9060|P5000|CDM8992|TXT8045|ADR8995|IS11PT|P2030|P6010|P8000|PT002|IS06|CDM8999|P9050|PT001|TXT8040|P2020|P9020|P2000|P7040|P7000|C790",Fly:"IQ230|IQ444|IQ450|IQ440|IQ442|IQ441|IQ245|IQ256|IQ236|IQ255|IQ235|IQ245|IQ275|IQ240|IQ285|IQ280|IQ270|IQ260|IQ250",Wiko:"KITE 4G|HIGHWAY|GETAWAY|STAIRWAY|DARKSIDE|DARKFULL|DARKNIGHT|DARKMOON|SLIDE|WAX 4G|RAINBOW|BLOOM|SUNSET|GOA(?!nna)|LENNY|BARRY|IGGY|OZZY|CINK FIVE|CINK PEAX|CINK PEAX 2|CINK SLIM|CINK SLIM 2|CINK +|CINK KING|CINK PEAX|CINK SLIM|SUBLIM",iMobile:"i-mobile (IQ|i-STYLE|idea|ZAA|Hitz)",SimValley:"\\b(SP-80|XT-930|SX-340|XT-930|SX-310|SP-360|SP60|SPT-800|SP-120|SPT-800|SP-140|SPX-5|SPX-8|SP-100|SPX-8|SPX-12)\\b",Wolfgang:"AT-B24D|AT-AS50HD|AT-AS40W|AT-AS55HD|AT-AS45q2|AT-B26D|AT-AS50Q",Alcatel:"Alcatel",Nintendo:"Nintendo (3DS|Switch)",Amoi:"Amoi",INQ:"INQ",OnePlus:"ONEPLUS",GenericPhone:"Tapatalk|PDA;|SAGEM|\\bmmp\\b|pocket|\\bpsp\\b|symbian|Smartphone|smartfon|treo|up.browser|up.link|vodafone|\\bwap\\b|nokia|Series40|Series60|S60|SonyEricsson|N900|MAUI.*WAP.*Browser"},tablets:{iPad:"iPad|iPad.*Mobile",NexusTablet:"Android.*Nexus[\\s]+(7|9|10)",GoogleTablet:"Android.*Pixel C",SamsungTablet:"SAMSUNG.*Tablet|Galaxy.*Tab|SC-01C|GT-P1000|GT-P1003|GT-P1010|GT-P3105|GT-P6210|GT-P6800|GT-P6810|GT-P7100|GT-P7300|GT-P7310|GT-P7500|GT-P7510|SCH-I800|SCH-I815|SCH-I905|SGH-I957|SGH-I987|SGH-T849|SGH-T859|SGH-T869|SPH-P100|GT-P3100|GT-P3108|GT-P3110|GT-P5100|GT-P5110|GT-P6200|GT-P7320|GT-P7511|GT-N8000|GT-P8510|SGH-I497|SPH-P500|SGH-T779|SCH-I705|SCH-I915|GT-N8013|GT-P3113|GT-P5113|GT-P8110|GT-N8010|GT-N8005|GT-N8020|GT-P1013|GT-P6201|GT-P7501|GT-N5100|GT-N5105|GT-N5110|SHV-E140K|SHV-E140L|SHV-E140S|SHV-E150S|SHV-E230K|SHV-E230L|SHV-E230S|SHW-M180K|SHW-M180L|SHW-M180S|SHW-M180W|SHW-M300W|SHW-M305W|SHW-M380K|SHW-M380S|SHW-M380W|SHW-M430W|SHW-M480K|SHW-M480S|SHW-M480W|SHW-M485W|SHW-M486W|SHW-M500W|GT-I9228|SCH-P739|SCH-I925|GT-I9200|GT-P5200|GT-P5210|GT-P5210X|SM-T311|SM-T310|SM-T310X|SM-T210|SM-T210R|SM-T211|SM-P600|SM-P601|SM-P605|SM-P900|SM-P901|SM-T217|SM-T217A|SM-T217S|SM-P6000|SM-T3100|SGH-I467|XE500|SM-T110|GT-P5220|GT-I9200X|GT-N5110X|GT-N5120|SM-P905|SM-T111|SM-T2105|SM-T315|SM-T320|SM-T320X|SM-T321|SM-T520|SM-T525|SM-T530NU|SM-T230NU|SM-T330NU|SM-T900|XE500T1C|SM-P605V|SM-P905V|SM-T337V|SM-T537V|SM-T707V|SM-T807V|SM-P600X|SM-P900X|SM-T210X|SM-T230|SM-T230X|SM-T325|GT-P7503|SM-T531|SM-T330|SM-T530|SM-T705|SM-T705C|SM-T535|SM-T331|SM-T800|SM-T700|SM-T537|SM-T807|SM-P907A|SM-T337A|SM-T537A|SM-T707A|SM-T807A|SM-T237|SM-T807P|SM-P607T|SM-T217T|SM-T337T|SM-T807T|SM-T116NQ|SM-T116BU|SM-P550|SM-T350|SM-T550|SM-T9000|SM-P9000|SM-T705Y|SM-T805|GT-P3113|SM-T710|SM-T810|SM-T815|SM-T360|SM-T533|SM-T113|SM-T335|SM-T715|SM-T560|SM-T670|SM-T677|SM-T377|SM-T567|SM-T357T|SM-T555|SM-T561|SM-T713|SM-T719|SM-T813|SM-T819|SM-T580|SM-T355Y?|SM-T280|SM-T817A|SM-T820|SM-W700|SM-P580|SM-T587|SM-P350|SM-P555M|SM-P355M|SM-T113NU|SM-T815Y|SM-T585|SM-T285|SM-T825|SM-W708|SM-T835|SM-T830|SM-T837V|SM-T720|SM-T510|SM-T387V",Kindle:"Kindle|Silk.*Accelerated|Android.*\\b(KFOT|KFTT|KFJWI|KFJWA|KFOTE|KFSOWI|KFTHWI|KFTHWA|KFAPWI|KFAPWA|WFJWAE|KFSAWA|KFSAWI|KFASWI|KFARWI|KFFOWI|KFGIWI|KFMEWI)\\b|Android.*Silk/[0-9.]+ like Chrome/[0-9.]+ (?!Mobile)",SurfaceTablet:"Windows NT [0-9.]+; ARM;.*(Tablet|ARMBJS)",HPTablet:"HP Slate (7|8|10)|HP ElitePad 900|hp-tablet|EliteBook.*Touch|HP 8|Slate 21|HP SlateBook 10",AsusTablet:"^.*PadFone((?!Mobile).)*$|Transformer|TF101|TF101G|TF300T|TF300TG|TF300TL|TF700T|TF700KL|TF701T|TF810C|ME171|ME301T|ME302C|ME371MG|ME370T|ME372MG|ME172V|ME173X|ME400C|Slider SL101|\\bK00F\\b|\\bK00C\\b|\\bK00E\\b|\\bK00L\\b|TX201LA|ME176C|ME102A|\\bM80TA\\b|ME372CL|ME560CG|ME372CG|ME302KL| K010 | K011 | K017 | K01E |ME572C|ME103K|ME170C|ME171C|\\bME70C\\b|ME581C|ME581CL|ME8510C|ME181C|P01Y|PO1MA|P01Z|\\bP027\\b|\\bP024\\b|\\bP00C\\b",BlackBerryTablet:"PlayBook|RIM Tablet",HTCtablet:"HTC_Flyer_P512|HTC Flyer|HTC Jetstream|HTC-P715a|HTC EVO View 4G|PG41200|PG09410",MotorolaTablet:"xoom|sholest|MZ615|MZ605|MZ505|MZ601|MZ602|MZ603|MZ604|MZ606|MZ607|MZ608|MZ609|MZ615|MZ616|MZ617",NookTablet:"Android.*Nook|NookColor|nook browser|BNRV200|BNRV200A|BNTV250|BNTV250A|BNTV400|BNTV600|LogicPD Zoom2",AcerTablet:"Android.*; \\b(A100|A101|A110|A200|A210|A211|A500|A501|A510|A511|A700|A701|W500|W500P|W501|W501P|W510|W511|W700|G100|G100W|B1-A71|B1-710|B1-711|A1-810|A1-811|A1-830)\\b|W3-810|\\bA3-A10\\b|\\bA3-A11\\b|\\bA3-A20\\b|\\bA3-A30",ToshibaTablet:"Android.*(AT100|AT105|AT200|AT205|AT270|AT275|AT300|AT305|AT1S5|AT500|AT570|AT700|AT830)|TOSHIBA.*FOLIO",LGTablet:"\\bL-06C|LG-V909|LG-V900|LG-V700|LG-V510|LG-V500|LG-V410|LG-V400|LG-VK810\\b",FujitsuTablet:"Android.*\\b(F-01D|F-02F|F-05E|F-10D|M532|Q572)\\b",PrestigioTablet:"PMP3170B|PMP3270B|PMP3470B|PMP7170B|PMP3370B|PMP3570C|PMP5870C|PMP3670B|PMP5570C|PMP5770D|PMP3970B|PMP3870C|PMP5580C|PMP5880D|PMP5780D|PMP5588C|PMP7280C|PMP7280C3G|PMP7280|PMP7880D|PMP5597D|PMP5597|PMP7100D|PER3464|PER3274|PER3574|PER3884|PER5274|PER5474|PMP5097CPRO|PMP5097|PMP7380D|PMP5297C|PMP5297C_QUAD|PMP812E|PMP812E3G|PMP812F|PMP810E|PMP880TD|PMT3017|PMT3037|PMT3047|PMT3057|PMT7008|PMT5887|PMT5001|PMT5002",LenovoTablet:"Lenovo TAB|Idea(Tab|Pad)( A1|A10| K1|)|ThinkPad([ ]+)?Tablet|YT3-850M|YT3-X90L|YT3-X90F|YT3-X90X|Lenovo.*(S2109|S2110|S5000|S6000|K3011|A3000|A3500|A1000|A2107|A2109|A1107|A5500|A7600|B6000|B8000|B8080)(-|)(FL|F|HV|H|)|TB-X103F|TB-X304X|TB-X304F|TB-X304L|TB-X505F|TB-X505L|TB-X505X|TB-X605F|TB-X605L|TB-8703F|TB-8703X|TB-8703N|TB-8704N|TB-8704F|TB-8704X|TB-8704V|TB-7304F|TB-7304I|TB-7304X|Tab2A7-10F|Tab2A7-20F|TB2-X30L|YT3-X50L|YT3-X50F|YT3-X50M|YT-X705F|YT-X703F|YT-X703L|YT-X705L|YT-X705X|TB2-X30F|TB2-X30L|TB2-X30M|A2107A-F|A2107A-H|TB3-730F|TB3-730M|TB3-730X|TB-7504F|TB-7504X",DellTablet:"Venue 11|Venue 8|Venue 7|Dell Streak 10|Dell Streak 7",YarvikTablet:"Android.*\\b(TAB210|TAB211|TAB224|TAB250|TAB260|TAB264|TAB310|TAB360|TAB364|TAB410|TAB411|TAB420|TAB424|TAB450|TAB460|TAB461|TAB464|TAB465|TAB467|TAB468|TAB07-100|TAB07-101|TAB07-150|TAB07-151|TAB07-152|TAB07-200|TAB07-201-3G|TAB07-210|TAB07-211|TAB07-212|TAB07-214|TAB07-220|TAB07-400|TAB07-485|TAB08-150|TAB08-200|TAB08-201-3G|TAB08-201-30|TAB09-100|TAB09-211|TAB09-410|TAB10-150|TAB10-201|TAB10-211|TAB10-400|TAB10-410|TAB13-201|TAB274EUK|TAB275EUK|TAB374EUK|TAB462EUK|TAB474EUK|TAB9-200)\\b",MedionTablet:"Android.*\\bOYO\\b|LIFE.*(P9212|P9514|P9516|S9512)|LIFETAB",ArnovaTablet:"97G4|AN10G2|AN7bG3|AN7fG3|AN8G3|AN8cG3|AN7G3|AN9G3|AN7dG3|AN7dG3ST|AN7dG3ChildPad|AN10bG3|AN10bG3DT|AN9G2",IntensoTablet:"INM8002KP|INM1010FP|INM805ND|Intenso Tab|TAB1004",IRUTablet:"M702pro",MegafonTablet:"MegaFon V9|\\bZTE V9\\b|Android.*\\bMT7A\\b",EbodaTablet:"E-Boda (Supreme|Impresspeed|Izzycomm|Essential)",AllViewTablet:"Allview.*(Viva|Alldro|City|Speed|All TV|Frenzy|Quasar|Shine|TX1|AX1|AX2)",ArchosTablet:"\\b(101G9|80G9|A101IT)\\b|Qilive 97R|Archos5|\\bARCHOS (70|79|80|90|97|101|FAMILYPAD|)(b|c|)(G10| Cobalt| TITANIUM(HD|)| Xenon| Neon|XSK| 2| XS 2| PLATINUM| CARBON|GAMEPAD)\\b",AinolTablet:"NOVO7|NOVO8|NOVO10|Novo7Aurora|Novo7Basic|NOVO7PALADIN|novo9-Spark",NokiaLumiaTablet:"Lumia 2520",SonyTablet:"Sony.*Tablet|Xperia Tablet|Sony Tablet S|SO-03E|SGPT12|SGPT13|SGPT114|SGPT121|SGPT122|SGPT123|SGPT111|SGPT112|SGPT113|SGPT131|SGPT132|SGPT133|SGPT211|SGPT212|SGPT213|SGP311|SGP312|SGP321|EBRD1101|EBRD1102|EBRD1201|SGP351|SGP341|SGP511|SGP512|SGP521|SGP541|SGP551|SGP621|SGP641|SGP612|SOT31|SGP771|SGP611|SGP612|SGP712",PhilipsTablet:"\\b(PI2010|PI3000|PI3100|PI3105|PI3110|PI3205|PI3210|PI3900|PI4010|PI7000|PI7100)\\b",CubeTablet:"Android.*(K8GT|U9GT|U10GT|U16GT|U17GT|U18GT|U19GT|U20GT|U23GT|U30GT)|CUBE U8GT",CobyTablet:"MID1042|MID1045|MID1125|MID1126|MID7012|MID7014|MID7015|MID7034|MID7035|MID7036|MID7042|MID7048|MID7127|MID8042|MID8048|MID8127|MID9042|MID9740|MID9742|MID7022|MID7010",MIDTablet:"M9701|M9000|M9100|M806|M1052|M806|T703|MID701|MID713|MID710|MID727|MID760|MID830|MID728|MID933|MID125|MID810|MID732|MID120|MID930|MID800|MID731|MID900|MID100|MID820|MID735|MID980|MID130|MID833|MID737|MID960|MID135|MID860|MID736|MID140|MID930|MID835|MID733|MID4X10",MSITablet:"MSI \\b(Primo 73K|Primo 73L|Primo 81L|Primo 77|Primo 93|Primo 75|Primo 76|Primo 73|Primo 81|Primo 91|Primo 90|Enjoy 71|Enjoy 7|Enjoy 10)\\b",SMiTTablet:"Android.*(\\bMID\\b|MID-560|MTV-T1200|MTV-PND531|MTV-P1101|MTV-PND530)",RockChipTablet:"Android.*(RK2818|RK2808A|RK2918|RK3066)|RK2738|RK2808A",FlyTablet:"IQ310|Fly Vision",bqTablet:"Android.*(bq)?.*\\b(Elcano|Curie|Edison|Maxwell|Kepler|Pascal|Tesla|Hypatia|Platon|Newton|Livingstone|Cervantes|Avant|Aquaris ([E|M]10|M8))\\b|Maxwell.*Lite|Maxwell.*Plus",HuaweiTablet:"MediaPad|MediaPad 7 Youth|IDEOS S7|S7-201c|S7-202u|S7-101|S7-103|S7-104|S7-105|S7-106|S7-201|S7-Slim|M2-A01L|BAH-L09|BAH-W09|AGS-L09|CMR-AL19",NecTablet:"\\bN-06D|\\bN-08D",PantechTablet:"Pantech.*P4100",BronchoTablet:"Broncho.*(N701|N708|N802|a710)",VersusTablet:"TOUCHPAD.*[78910]|\\bTOUCHTAB\\b",ZyncTablet:"z1000|Z99 2G|z930|z990|z909|Z919|z900",PositivoTablet:"TB07STA|TB10STA|TB07FTA|TB10FTA",NabiTablet:"Android.*\\bNabi",KoboTablet:"Kobo Touch|\\bK080\\b|\\bVox\\b Build|\\bArc\\b Build",DanewTablet:"DSlide.*\\b(700|701R|702|703R|704|802|970|971|972|973|974|1010|1012)\\b",TexetTablet:"NaviPad|TB-772A|TM-7045|TM-7055|TM-9750|TM-7016|TM-7024|TM-7026|TM-7041|TM-7043|TM-7047|TM-8041|TM-9741|TM-9747|TM-9748|TM-9751|TM-7022|TM-7021|TM-7020|TM-7011|TM-7010|TM-7023|TM-7025|TM-7037W|TM-7038W|TM-7027W|TM-9720|TM-9725|TM-9737W|TM-1020|TM-9738W|TM-9740|TM-9743W|TB-807A|TB-771A|TB-727A|TB-725A|TB-719A|TB-823A|TB-805A|TB-723A|TB-715A|TB-707A|TB-705A|TB-709A|TB-711A|TB-890HD|TB-880HD|TB-790HD|TB-780HD|TB-770HD|TB-721HD|TB-710HD|TB-434HD|TB-860HD|TB-840HD|TB-760HD|TB-750HD|TB-740HD|TB-730HD|TB-722HD|TB-720HD|TB-700HD|TB-500HD|TB-470HD|TB-431HD|TB-430HD|TB-506|TB-504|TB-446|TB-436|TB-416|TB-146SE|TB-126SE",PlaystationTablet:"Playstation.*(Portable|Vita)",TrekstorTablet:"ST10416-1|VT10416-1|ST70408-1|ST702xx-1|ST702xx-2|ST80208|ST97216|ST70104-2|VT10416-2|ST10216-2A|SurfTab",PyleAudioTablet:"\\b(PTBL10CEU|PTBL10C|PTBL72BC|PTBL72BCEU|PTBL7CEU|PTBL7C|PTBL92BC|PTBL92BCEU|PTBL9CEU|PTBL9CUK|PTBL9C)\\b",AdvanTablet:"Android.* \\b(E3A|T3X|T5C|T5B|T3E|T3C|T3B|T1J|T1F|T2A|T1H|T1i|E1C|T1-E|T5-A|T4|E1-B|T2Ci|T1-B|T1-D|O1-A|E1-A|T1-A|T3A|T4i)\\b ",DanyTechTablet:"Genius Tab G3|Genius Tab S2|Genius Tab Q3|Genius Tab G4|Genius Tab Q4|Genius Tab G-II|Genius TAB GII|Genius TAB GIII|Genius Tab S1",GalapadTablet:"Android.*\\bG1\\b(?!\\))",MicromaxTablet:"Funbook|Micromax.*\\b(P250|P560|P360|P362|P600|P300|P350|P500|P275)\\b",KarbonnTablet:"Android.*\\b(A39|A37|A34|ST8|ST10|ST7|Smart Tab3|Smart Tab2)\\b",AllFineTablet:"Fine7 Genius|Fine7 Shine|Fine7 Air|Fine8 Style|Fine9 More|Fine10 Joy|Fine11 Wide",PROSCANTablet:"\\b(PEM63|PLT1023G|PLT1041|PLT1044|PLT1044G|PLT1091|PLT4311|PLT4311PL|PLT4315|PLT7030|PLT7033|PLT7033D|PLT7035|PLT7035D|PLT7044K|PLT7045K|PLT7045KB|PLT7071KG|PLT7072|PLT7223G|PLT7225G|PLT7777G|PLT7810K|PLT7849G|PLT7851G|PLT7852G|PLT8015|PLT8031|PLT8034|PLT8036|PLT8080K|PLT8082|PLT8088|PLT8223G|PLT8234G|PLT8235G|PLT8816K|PLT9011|PLT9045K|PLT9233G|PLT9735|PLT9760G|PLT9770G)\\b",YONESTablet:"BQ1078|BC1003|BC1077|RK9702|BC9730|BC9001|IT9001|BC7008|BC7010|BC708|BC728|BC7012|BC7030|BC7027|BC7026",ChangJiaTablet:"TPC7102|TPC7103|TPC7105|TPC7106|TPC7107|TPC7201|TPC7203|TPC7205|TPC7210|TPC7708|TPC7709|TPC7712|TPC7110|TPC8101|TPC8103|TPC8105|TPC8106|TPC8203|TPC8205|TPC8503|TPC9106|TPC9701|TPC97101|TPC97103|TPC97105|TPC97106|TPC97111|TPC97113|TPC97203|TPC97603|TPC97809|TPC97205|TPC10101|TPC10103|TPC10106|TPC10111|TPC10203|TPC10205|TPC10503",GUTablet:"TX-A1301|TX-M9002|Q702|kf026",PointOfViewTablet:"TAB-P506|TAB-navi-7-3G-M|TAB-P517|TAB-P-527|TAB-P701|TAB-P703|TAB-P721|TAB-P731N|TAB-P741|TAB-P825|TAB-P905|TAB-P925|TAB-PR945|TAB-PL1015|TAB-P1025|TAB-PI1045|TAB-P1325|TAB-PROTAB[0-9]+|TAB-PROTAB25|TAB-PROTAB26|TAB-PROTAB27|TAB-PROTAB26XL|TAB-PROTAB2-IPS9|TAB-PROTAB30-IPS9|TAB-PROTAB25XXL|TAB-PROTAB26-IPS10|TAB-PROTAB30-IPS10",OvermaxTablet:"OV-(SteelCore|NewBase|Basecore|Baseone|Exellen|Quattor|EduTab|Solution|ACTION|BasicTab|TeddyTab|MagicTab|Stream|TB-08|TB-09)|Qualcore 1027",HCLTablet:"HCL.*Tablet|Connect-3G-2.0|Connect-2G-2.0|ME Tablet U1|ME Tablet U2|ME Tablet G1|ME Tablet X1|ME Tablet Y2|ME Tablet Sync",DPSTablet:"DPS Dream 9|DPS Dual 7",VistureTablet:"V97 HD|i75 3G|Visture V4( HD)?|Visture V5( HD)?|Visture V10",CrestaTablet:"CTP(-)?810|CTP(-)?818|CTP(-)?828|CTP(-)?838|CTP(-)?888|CTP(-)?978|CTP(-)?980|CTP(-)?987|CTP(-)?988|CTP(-)?989",MediatekTablet:"\\bMT8125|MT8389|MT8135|MT8377\\b",ConcordeTablet:"Concorde([ ]+)?Tab|ConCorde ReadMan",GoCleverTablet:"GOCLEVER TAB|A7GOCLEVER|M1042|M7841|M742|R1042BK|R1041|TAB A975|TAB A7842|TAB A741|TAB A741L|TAB M723G|TAB M721|TAB A1021|TAB I921|TAB R721|TAB I720|TAB T76|TAB R70|TAB R76.2|TAB R106|TAB R83.2|TAB M813G|TAB I721|GCTA722|TAB I70|TAB I71|TAB S73|TAB R73|TAB R74|TAB R93|TAB R75|TAB R76.1|TAB A73|TAB A93|TAB A93.2|TAB T72|TAB R83|TAB R974|TAB R973|TAB A101|TAB A103|TAB A104|TAB A104.2|R105BK|M713G|A972BK|TAB A971|TAB R974.2|TAB R104|TAB R83.3|TAB A1042",ModecomTablet:"FreeTAB 9000|FreeTAB 7.4|FreeTAB 7004|FreeTAB 7800|FreeTAB 2096|FreeTAB 7.5|FreeTAB 1014|FreeTAB 1001 |FreeTAB 8001|FreeTAB 9706|FreeTAB 9702|FreeTAB 7003|FreeTAB 7002|FreeTAB 1002|FreeTAB 7801|FreeTAB 1331|FreeTAB 1004|FreeTAB 8002|FreeTAB 8014|FreeTAB 9704|FreeTAB 1003",VoninoTablet:"\\b(Argus[ _]?S|Diamond[ _]?79HD|Emerald[ _]?78E|Luna[ _]?70C|Onyx[ _]?S|Onyx[ _]?Z|Orin[ _]?HD|Orin[ _]?S|Otis[ _]?S|SpeedStar[ _]?S|Magnet[ _]?M9|Primus[ _]?94[ _]?3G|Primus[ _]?94HD|Primus[ _]?QS|Android.*\\bQ8\\b|Sirius[ _]?EVO[ _]?QS|Sirius[ _]?QS|Spirit[ _]?S)\\b",ECSTablet:"V07OT2|TM105A|S10OT1|TR10CS1",StorexTablet:"eZee[_']?(Tab|Go)[0-9]+|TabLC7|Looney Tunes Tab",VodafoneTablet:"SmartTab([ ]+)?[0-9]+|SmartTabII10|SmartTabII7|VF-1497|VFD 1400",EssentielBTablet:"Smart[ ']?TAB[ ]+?[0-9]+|Family[ ']?TAB2",RossMoorTablet:"RM-790|RM-997|RMD-878G|RMD-974R|RMT-705A|RMT-701|RME-601|RMT-501|RMT-711",iMobileTablet:"i-mobile i-note",TolinoTablet:"tolino tab [0-9.]+|tolino shine",AudioSonicTablet:"\\bC-22Q|T7-QC|T-17B|T-17P\\b",AMPETablet:"Android.* A78 ",SkkTablet:"Android.* (SKYPAD|PHOENIX|CYCLOPS)",TecnoTablet:"TECNO P9|TECNO DP8D",JXDTablet:"Android.* \\b(F3000|A3300|JXD5000|JXD3000|JXD2000|JXD300B|JXD300|S5800|S7800|S602b|S5110b|S7300|S5300|S602|S603|S5100|S5110|S601|S7100a|P3000F|P3000s|P101|P200s|P1000m|P200m|P9100|P1000s|S6600b|S908|P1000|P300|S18|S6600|S9100)\\b",iJoyTablet:"Tablet (Spirit 7|Essentia|Galatea|Fusion|Onix 7|Landa|Titan|Scooby|Deox|Stella|Themis|Argon|Unique 7|Sygnus|Hexen|Finity 7|Cream|Cream X2|Jade|Neon 7|Neron 7|Kandy|Scape|Saphyr 7|Rebel|Biox|Rebel|Rebel 8GB|Myst|Draco 7|Myst|Tab7-004|Myst|Tadeo Jones|Tablet Boing|Arrow|Draco Dual Cam|Aurix|Mint|Amity|Revolution|Finity 9|Neon 9|T9w|Amity 4GB Dual Cam|Stone 4GB|Stone 8GB|Andromeda|Silken|X2|Andromeda II|Halley|Flame|Saphyr 9,7|Touch 8|Planet|Triton|Unique 10|Hexen 10|Memphis 4GB|Memphis 8GB|Onix 10)",FX2Tablet:"FX2 PAD7|FX2 PAD10",XoroTablet:"KidsPAD 701|PAD[ ]?712|PAD[ ]?714|PAD[ ]?716|PAD[ ]?717|PAD[ ]?718|PAD[ ]?720|PAD[ ]?721|PAD[ ]?722|PAD[ ]?790|PAD[ ]?792|PAD[ ]?900|PAD[ ]?9715D|PAD[ ]?9716DR|PAD[ ]?9718DR|PAD[ ]?9719QR|PAD[ ]?9720QR|TelePAD1030|Telepad1032|TelePAD730|TelePAD731|TelePAD732|TelePAD735Q|TelePAD830|TelePAD9730|TelePAD795|MegaPAD 1331|MegaPAD 1851|MegaPAD 2151",ViewsonicTablet:"ViewPad 10pi|ViewPad 10e|ViewPad 10s|ViewPad E72|ViewPad7|ViewPad E100|ViewPad 7e|ViewSonic VB733|VB100a",VerizonTablet:"QTAQZ3|QTAIR7|QTAQTZ3|QTASUN1|QTASUN2|QTAXIA1",OdysTablet:"LOOX|XENO10|ODYS[ -](Space|EVO|Xpress|NOON)|\\bXELIO\\b|Xelio10Pro|XELIO7PHONETAB|XELIO10EXTREME|XELIOPT2|NEO_QUAD10",CaptivaTablet:"CAPTIVA PAD",IconbitTablet:"NetTAB|NT-3702|NT-3702S|NT-3702S|NT-3603P|NT-3603P|NT-0704S|NT-0704S|NT-3805C|NT-3805C|NT-0806C|NT-0806C|NT-0909T|NT-0909T|NT-0907S|NT-0907S|NT-0902S|NT-0902S",TeclastTablet:"T98 4G|\\bP80\\b|\\bX90HD\\b|X98 Air|X98 Air 3G|\\bX89\\b|P80 3G|\\bX80h\\b|P98 Air|\\bX89HD\\b|P98 3G|\\bP90HD\\b|P89 3G|X98 3G|\\bP70h\\b|P79HD 3G|G18d 3G|\\bP79HD\\b|\\bP89s\\b|\\bA88\\b|\\bP10HD\\b|\\bP19HD\\b|G18 3G|\\bP78HD\\b|\\bA78\\b|\\bP75\\b|G17s 3G|G17h 3G|\\bP85t\\b|\\bP90\\b|\\bP11\\b|\\bP98t\\b|\\bP98HD\\b|\\bG18d\\b|\\bP85s\\b|\\bP11HD\\b|\\bP88s\\b|\\bA80HD\\b|\\bA80se\\b|\\bA10h\\b|\\bP89\\b|\\bP78s\\b|\\bG18\\b|\\bP85\\b|\\bA70h\\b|\\bA70\\b|\\bG17\\b|\\bP18\\b|\\bA80s\\b|\\bA11s\\b|\\bP88HD\\b|\\bA80h\\b|\\bP76s\\b|\\bP76h\\b|\\bP98\\b|\\bA10HD\\b|\\bP78\\b|\\bP88\\b|\\bA11\\b|\\bA10t\\b|\\bP76a\\b|\\bP76t\\b|\\bP76e\\b|\\bP85HD\\b|\\bP85a\\b|\\bP86\\b|\\bP75HD\\b|\\bP76v\\b|\\bA12\\b|\\bP75a\\b|\\bA15\\b|\\bP76Ti\\b|\\bP81HD\\b|\\bA10\\b|\\bT760VE\\b|\\bT720HD\\b|\\bP76\\b|\\bP73\\b|\\bP71\\b|\\bP72\\b|\\bT720SE\\b|\\bC520Ti\\b|\\bT760\\b|\\bT720VE\\b|T720-3GE|T720-WiFi",OndaTablet:"\\b(V975i|Vi30|VX530|V701|Vi60|V701s|Vi50|V801s|V719|Vx610w|VX610W|V819i|Vi10|VX580W|Vi10|V711s|V813|V811|V820w|V820|Vi20|V711|VI30W|V712|V891w|V972|V819w|V820w|Vi60|V820w|V711|V813s|V801|V819|V975s|V801|V819|V819|V818|V811|V712|V975m|V101w|V961w|V812|V818|V971|V971s|V919|V989|V116w|V102w|V973|Vi40)\\b[\\s]+|V10 \\b4G\\b",JaytechTablet:"TPC-PA762",BlaupunktTablet:"Endeavour 800NG|Endeavour 1010",DigmaTablet:"\\b(iDx10|iDx9|iDx8|iDx7|iDxD7|iDxD8|iDsQ8|iDsQ7|iDsQ8|iDsD10|iDnD7|3TS804H|iDsQ11|iDj7|iDs10)\\b",EvolioTablet:"ARIA_Mini_wifi|Aria[ _]Mini|Evolio X10|Evolio X7|Evolio X8|\\bEvotab\\b|\\bNeura\\b",LavaTablet:"QPAD E704|\\bIvoryS\\b|E-TAB IVORY|\\bE-TAB\\b",AocTablet:"MW0811|MW0812|MW0922|MTK8382|MW1031|MW0831|MW0821|MW0931|MW0712",MpmanTablet:"MP11 OCTA|MP10 OCTA|MPQC1114|MPQC1004|MPQC994|MPQC974|MPQC973|MPQC804|MPQC784|MPQC780|\\bMPG7\\b|MPDCG75|MPDCG71|MPDC1006|MP101DC|MPDC9000|MPDC905|MPDC706HD|MPDC706|MPDC705|MPDC110|MPDC100|MPDC99|MPDC97|MPDC88|MPDC8|MPDC77|MP709|MID701|MID711|MID170|MPDC703|MPQC1010",CelkonTablet:"CT695|CT888|CT[\\s]?910|CT7 Tab|CT9 Tab|CT3 Tab|CT2 Tab|CT1 Tab|C820|C720|\\bCT-1\\b",WolderTablet:"miTab \\b(DIAMOND|SPACE|BROOKLYN|NEO|FLY|MANHATTAN|FUNK|EVOLUTION|SKY|GOCAR|IRON|GENIUS|POP|MINT|EPSILON|BROADWAY|JUMP|HOP|LEGEND|NEW AGE|LINE|ADVANCE|FEEL|FOLLOW|LIKE|LINK|LIVE|THINK|FREEDOM|CHICAGO|CLEVELAND|BALTIMORE-GH|IOWA|BOSTON|SEATTLE|PHOENIX|DALLAS|IN 101|MasterChef)\\b",MediacomTablet:"M-MPI10C3G|M-SP10EG|M-SP10EGP|M-SP10HXAH|M-SP7HXAH|M-SP10HXBH|M-SP8HXAH|M-SP8MXA",MiTablet:"\\bMI PAD\\b|\\bHM NOTE 1W\\b",NibiruTablet:"Nibiru M1|Nibiru Jupiter One",NexoTablet:"NEXO NOVA|NEXO 10|NEXO AVIO|NEXO FREE|NEXO GO|NEXO EVO|NEXO 3G|NEXO SMART|NEXO KIDDO|NEXO MOBI",LeaderTablet:"TBLT10Q|TBLT10I|TBL-10WDKB|TBL-10WDKBO2013|TBL-W230V2|TBL-W450|TBL-W500|SV572|TBLT7I|TBA-AC7-8G|TBLT79|TBL-8W16|TBL-10W32|TBL-10WKB|TBL-W100",UbislateTablet:"UbiSlate[\\s]?7C",PocketBookTablet:"Pocketbook",KocasoTablet:"\\b(TB-1207)\\b",HisenseTablet:"\\b(F5281|E2371)\\b",Hudl:"Hudl HT7S3|Hudl 2",TelstraTablet:"T-Hub2",GenericTablet:"Android.*\\b97D\\b|Tablet(?!.*PC)|BNTV250A|MID-WCDMA|LogicPD Zoom2|\\bA7EB\\b|CatNova8|A1_07|CT704|CT1002|\\bM721\\b|rk30sdk|\\bEVOTAB\\b|M758A|ET904|ALUMIUM10|Smartfren Tab|Endeavour 1010|Tablet-PC-4|Tagi Tab|\\bM6pro\\b|CT1020W|arc 10HD|\\bTP750\\b|\\bQTAQZ3\\b|WVT101|TM1088|KT107"},oss:{AndroidOS:"Android",BlackBerryOS:"blackberry|\\bBB10\\b|rim tablet os",PalmOS:"PalmOS|avantgo|blazer|elaine|hiptop|palm|plucker|xiino",SymbianOS:"Symbian|SymbOS|Series60|Series40|SYB-[0-9]+|\\bS60\\b",WindowsMobileOS:"Windows CE.*(PPC|Smartphone|Mobile|[0-9]{3}x[0-9]{3})|Windows Mobile|Windows Phone [0-9.]+|WCE;",WindowsPhoneOS:"Windows Phone 10.0|Windows Phone 8.1|Windows Phone 8.0|Windows Phone OS|XBLWP7|ZuneWP7|Windows NT 6.[23]; ARM;",iOS:"\\biPhone.*Mobile|\\biPod|\\biPad|AppleCoreMedia",iPadOS:"CPU OS 13",MeeGoOS:"MeeGo",MaemoOS:"Maemo",JavaOS:"J2ME/|\\bMIDP\\b|\\bCLDC\\b",webOS:"webOS|hpwOS",badaOS:"\\bBada\\b",BREWOS:"BREW"},uas:{Chrome:"\\bCrMo\\b|CriOS|Android.*Chrome/[.0-9]* (Mobile)?",Dolfin:"\\bDolfin\\b",Opera:"Opera.*Mini|Opera.*Mobi|Android.*Opera|Mobile.*OPR/[0-9.]+$|Coast/[0-9.]+",Skyfire:"Skyfire",Edge:"Mobile Safari/[.0-9]* Edge",IE:"IEMobile|MSIEMobile",Firefox:"fennec|firefox.*maemo|(Mobile|Tablet).*Firefox|Firefox.*Mobile|FxiOS",Bolt:"bolt",TeaShark:"teashark",Blazer:"Blazer",Safari:"Version.*Mobile.*Safari|Safari.*Mobile|MobileSafari",WeChat:"\\bMicroMessenger\\b",UCBrowser:"UC.*Browser|UCWEB",baiduboxapp:"baiduboxapp",baidubrowser:"baidubrowser",DiigoBrowser:"DiigoBrowser",Mercury:"\\bMercury\\b",ObigoBrowser:"Obigo",NetFront:"NF-Browser",GenericBrowser:"NokiaBrowser|OviBrowser|OneBrowser|TwonkyBeamBrowser|SEMC.*Browser|FlyFlow|Minimo|NetFront|Novarra-Vision|MQQBrowser|MicroMessenger",PaleMoon:"Android.*PaleMoon|Mobile.*PaleMoon"},props:{Mobile:"Mobile/[VER]",Build:"Build/[VER]",Version:"Version/[VER]",VendorID:"VendorID/[VER]",iPad:"iPad.*CPU[a-z ]+[VER]",iPhone:"iPhone.*CPU[a-z ]+[VER]",iPod:"iPod.*CPU[a-z ]+[VER]",Kindle:"Kindle/[VER]",Chrome:["Chrome/[VER]","CriOS/[VER]","CrMo/[VER]"],Coast:["Coast/[VER]"],Dolfin:"Dolfin/[VER]",Firefox:["Firefox/[VER]","FxiOS/[VER]"],Fennec:"Fennec/[VER]",Edge:"Edge/[VER]",IE:["IEMobile/[VER];","IEMobile [VER]","MSIE [VER];","Trident/[0-9.]+;.*rv:[VER]"],NetFront:"NetFront/[VER]",NokiaBrowser:"NokiaBrowser/[VER]",Opera:[" OPR/[VER]","Opera Mini/[VER]","Version/[VER]"],"Opera Mini":"Opera Mini/[VER]","Opera Mobi":"Version/[VER]",UCBrowser:["UCWEB[VER]","UC.*Browser/[VER]"],MQQBrowser:"MQQBrowser/[VER]",MicroMessenger:"MicroMessenger/[VER]",baiduboxapp:"baiduboxapp/[VER]",baidubrowser:"baidubrowser/[VER]",SamsungBrowser:"SamsungBrowser/[VER]",Iron:"Iron/[VER]",Safari:["Version/[VER]","Safari/[VER]"],Skyfire:"Skyfire/[VER]",Tizen:"Tizen/[VER]",Webkit:"webkit[ /][VER]",PaleMoon:"PaleMoon/[VER]",Gecko:"Gecko/[VER]",Trident:"Trident/[VER]",Presto:"Presto/[VER]",Goanna:"Goanna/[VER]",iOS:" \\bi?OS\\b [VER][ ;]{1}",Android:"Android [VER]",BlackBerry:["BlackBerry[\\w]+/[VER]","BlackBerry.*Version/[VER]","Version/[VER]"],BREW:"BREW [VER]",Java:"Java/[VER]","Windows Phone OS":["Windows Phone OS [VER]","Windows Phone [VER]"],"Windows Phone":"Windows Phone [VER]","Windows CE":"Windows CE/[VER]","Windows NT":"Windows NT [VER]",Symbian:["SymbianOS/[VER]","Symbian/[VER]"],webOS:["webOS/[VER]","hpwOS/[VER];"]},utils:{Bot:"Googlebot|facebookexternalhit|Google-AMPHTML|s~amp-validator|AdsBot-Google|Google Keyword Suggestion|Facebot|YandexBot|YandexMobileBot|bingbot|ia_archiver|AhrefsBot|Ezooms|GSLFbot|WBSearchBot|Twitterbot|TweetmemeBot|Twikle|PaperLiBot|Wotbox|UnwindFetchor|Exabot|MJ12bot|YandexImages|TurnitinBot|Pingdom|contentkingapp",MobileBot:"Googlebot-Mobile|AdsBot-Google-Mobile|YahooSeeker/M1A1-R2D2",DesktopMode:"WPDesktop",TV:"SonyDTV|HbbTV",WebKit:"(webkit)[ /]([\\w.]+)",Console:"\\b(Nintendo|Nintendo WiiU|Nintendo 3DS|Nintendo Switch|PLAYSTATION|Xbox)\\b",Watch:"SM-V700"}},detectMobileBrowsers:{fullPattern:/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i,shortPattern:/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i,tabletPattern:/android|ipad|playbook|silk/i}},u=Object.prototype.hasOwnProperty;function t(e,t){return null!=e&&null!=t&&e.toLowerCase()===t.toLowerCase()}function n(e,t){var n,r,i=e.length;if(!i||!t)return!1;for(n=t.toLowerCase(),r=0;r<i;++r)if(n===e[r].toLowerCase())return!0;return!1}function c(e){for(var t in e)u.call(e,t)&&(e[t]=new RegExp(e[t],"i"))}function a(e,t){this.ua=(e||"").substr(0,500),this._cache={},this.maxPhoneWidth=t||600}return l.FALLBACK_PHONE="UnknownPhone",l.FALLBACK_TABLET="UnknownTablet",l.FALLBACK_MOBILE="UnknownMobile",s="isArray"in Array?Array.isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)},function(){var e,t,n,r,i,o,a=l.mobileDetectRules;for(e in a.props)if(u.call(a.props,e)){for(t=a.props[e],s(t)||(t=[t]),i=t.length,r=0;r<i;++r)0<=(o=(n=t[r]).indexOf("[VER]"))&&(n=n.substring(0,o)+"([\\w._\\+]+)"+n.substring(o+5)),t[r]=new RegExp(n,"i");a.props[e]=t}c(a.oss),c(a.phones),c(a.tablets),c(a.uas),c(a.utils),a.oss0={WindowsPhoneOS:a.oss.WindowsPhoneOS,WindowsMobileOS:a.oss.WindowsMobileOS}}(),l.findMatch=function(e,t){for(var n in e)if(u.call(e,n)&&e[n].test(t))return n;return null},l.findMatches=function(e,t){var n=[];for(var r in e)u.call(e,r)&&e[r].test(t)&&n.push(r);return n},l.getVersionStr=function(e,t){var n,r,i,o,a=l.mobileDetectRules.props;if(u.call(a,e))for(i=(n=a[e]).length,r=0;r<i;++r)if(null!==(o=n[r].exec(t)))return o[1];return null},l.getVersion=function(e,t){var n=l.getVersionStr(e,t);return n?l.prepareVersionNo(n):NaN},l.prepareVersionNo=function(e){var t;return 1===(t=e.split(/[a-z._ \/\-]/i)).length&&(e=t[0]),1<t.length&&(e=t[0]+".",t.shift(),e+=t.join("")),Number(e)},l.isMobileFallback=function(e){return l.detectMobileBrowsers.fullPattern.test(e)||l.detectMobileBrowsers.shortPattern.test(e.substr(0,4))},l.isTabletFallback=function(e){return l.detectMobileBrowsers.tabletPattern.test(e)},l.prepareDetectionCache=function(e,t,n){if(e.mobile===d){var r,i,o;if(i=l.findMatch(l.mobileDetectRules.tablets,t))return e.mobile=e.tablet=i,void(e.phone=null);if(r=l.findMatch(l.mobileDetectRules.phones,t))return e.mobile=e.phone=r,void(e.tablet=null);l.isMobileFallback(t)?(o=a.isPhoneSized(n))===d?(e.mobile=l.FALLBACK_MOBILE,e.tablet=e.phone=null):o?(e.mobile=e.phone=l.FALLBACK_PHONE,e.tablet=null):(e.mobile=e.tablet=l.FALLBACK_TABLET,e.phone=null):l.isTabletFallback(t)?(e.mobile=e.tablet=l.FALLBACK_TABLET,e.phone=null):e.mobile=e.tablet=e.phone=null}},l.mobileGrade=function(e){var t=null!==e.mobile();return e.os("iOS")&&4.3<=e.version("iPad")||e.os("iOS")&&3.1<=e.version("iPhone")||e.os("iOS")&&3.1<=e.version("iPod")||2.1<e.version("Android")&&e.is("Webkit")||7<=e.version("Windows Phone OS")||e.is("BlackBerry")&&6<=e.version("BlackBerry")||e.match("Playbook.*Tablet")||1.4<=e.version("webOS")&&e.match("Palm|Pre|Pixi")||e.match("hp.*TouchPad")||e.is("Firefox")&&12<=e.version("Firefox")||e.is("Chrome")&&e.is("AndroidOS")&&4<=e.version("Android")||e.is("Skyfire")&&4.1<=e.version("Skyfire")&&e.is("AndroidOS")&&2.3<=e.version("Android")||e.is("Opera")&&11<e.version("Opera Mobi")&&e.is("AndroidOS")||e.is("MeeGoOS")||e.is("Tizen")||e.is("Dolfin")&&2<=e.version("Bada")||(e.is("UC Browser")||e.is("Dolfin"))&&2.3<=e.version("Android")||e.match("Kindle Fire")||e.is("Kindle")&&3<=e.version("Kindle")||e.is("AndroidOS")&&e.is("NookTablet")||11<=e.version("Chrome")&&!t||5<=e.version("Safari")&&!t||4<=e.version("Firefox")&&!t||7<=e.version("MSIE")&&!t||10<=e.version("Opera")&&!t?"A":e.os("iOS")&&e.version("iPad")<4.3||e.os("iOS")&&e.version("iPhone")<3.1||e.os("iOS")&&e.version("iPod")<3.1||e.is("Blackberry")&&5<=e.version("BlackBerry")&&e.version("BlackBerry")<6||5<=e.version("Opera Mini")&&e.version("Opera Mini")<=6.5&&(2.3<=e.version("Android")||e.is("iOS"))||e.match("NokiaN8|NokiaC7|N97.*Series60|Symbian/3")||11<=e.version("Opera Mobi")&&e.is("SymbianOS")?"B":(e.version("BlackBerry")<5||e.match("MSIEMobile|Windows CE.*Mobile")||e.version("Windows Mobile"),"C")},l.detectOS=function(e){return l.findMatch(l.mobileDetectRules.oss0,e)||l.findMatch(l.mobileDetectRules.oss,e)},l.getDeviceSmallerSide=function(){return window.screen.width<window.screen.height?window.screen.width:window.screen.height},a.prototype={constructor:a,mobile:function(){return l.prepareDetectionCache(this._cache,this.ua,this.maxPhoneWidth),this._cache.mobile},phone:function(){return l.prepareDetectionCache(this._cache,this.ua,this.maxPhoneWidth),this._cache.phone},tablet:function(){return l.prepareDetectionCache(this._cache,this.ua,this.maxPhoneWidth),this._cache.tablet},userAgent:function(){return this._cache.userAgent===d&&(this._cache.userAgent=l.findMatch(l.mobileDetectRules.uas,this.ua)),this._cache.userAgent},userAgents:function(){return this._cache.userAgents===d&&(this._cache.userAgents=l.findMatches(l.mobileDetectRules.uas,this.ua)),this._cache.userAgents},os:function(){return this._cache.os===d&&(this._cache.os=l.detectOS(this.ua)),this._cache.os},version:function(e){return l.getVersion(e,this.ua)},versionStr:function(e){return l.getVersionStr(e,this.ua)},is:function(e){return n(this.userAgents(),e)||t(e,this.os())||t(e,this.phone())||t(e,this.tablet())||n(l.findMatches(l.mobileDetectRules.utils,this.ua),e)},match:function(e){return e instanceof RegExp||(e=new RegExp(e,"i")),e.test(this.ua)},isPhoneSized:function(e){return a.isPhoneSized(e||this.maxPhoneWidth)},mobileGrade:function(){return this._cache.grade===d&&(this._cache.grade=l.mobileGrade(this)),this._cache.grade}},"undefined"!=typeof window&&window.screen?a.isPhoneSized=function(e){return e<0?d:l.getDeviceSmallerSide()<=e}:a.isPhoneSized=function(){},a._impl=l,a.version="1.4.4 2019-09-21",a})}(),function(e){"function"==typeof define&&define.amd&&define.amd.jQuery?define(["jquery"],e):"undefined"!=typeof module&&module.exports?e(require("jquery")):e(jQuery)}(function(se){var le="left",ue="right",ce="up",de="down",fe="in",pe="out",Te="none",he="auto",Se="swipe",be="pinch",me="tap",ve="doubletap",ge="longtap",ye="horizontal",Ae="vertical",Pe="all",Me=10,Ge="start",Ce="move",He="end",Ee="cancel",we="ontouchstart"in window,xe=window.navigator.msPointerEnabled&&!window.PointerEvent&&!we,Be=(window.PointerEvent||window.navigator.msPointerEnabled)&&!we,De="TouchSwipe";function r(e,p){p=se.extend({},p);var t=we||Be||!p.fallbackToMouseEvents,n=t?Be?xe?"MSPointerDown":"pointerdown":"touchstart":"mousedown",r=t?Be?xe?"MSPointerMove":"pointermove":"touchmove":"mousemove",i=t?Be?xe?"MSPointerUp":"pointerup":"touchend":"mouseup",o=!t||Be?"mouseleave":null,a=Be?xe?"MSPointerCancel":"pointercancel":"touchcancel",T=0,h=null,S=null,b=0,m=0,v=0,g=1,y=0,A=0,P=null,s=se(e),M="start",G=0,C={},l=0,H=0,u=0,c=0,d=0,f=null,E=null;try{s.on(n,w),s.on(a,D)}catch(e){se.error("events not supported "+n+","+a+" on jQuery.swipe")}function w(e){if(!0!==s.data(De+"_intouch")&&!(0<se(e.target).closest(p.excludedElements,s).length)){var t=e.originalEvent?e.originalEvent:e;if(!t.pointerType||"mouse"!=t.pointerType||0!=p.fallbackToMouseEvents){var n,r,i=t.touches,o=i?i[0]:t;return(M=Ge,i?G=i.length:!1!==p.preventDefaultEvents&&e.preventDefault(),A=S=h=null,g=1,y=v=m=b=T=0,(r={})[le]=ne(le),r[ue]=ne(ue),r[ce]=ne(ce),r[de]=ne(de),P=r,z(),J(0,o),!i||G===p.fingers||p.fingers===Pe||F()?(l=ae(),2==G&&(J(1,i[1]),m=v=ie(C[0].start,C[1].start)),(p.swipeStatus||p.pinchStatus)&&(n=k(t,M))):n=!1,!1===n)?(k(t,M=Ee),n):(p.hold&&(E=setTimeout(se.proxy(function(){s.trigger("hold",[t.target]),p.hold&&(n=p.hold.call(s,t,t.target))},this),p.longTapThreshold)),Z(!0),null)}}}function x(e){var t=e.originalEvent?e.originalEvent:e;if(M!==He&&M!==Ee&&!Y()){var n,r,i,o,a,s,l,u=t.touches,c=ee(u?u[0]:t);if(H=ae(),u&&(G=u.length),p.hold&&clearTimeout(E),M=Ce,2==G&&(0==m?(J(1,u[1]),m=v=ie(C[0].start,C[1].start)):(ee(u[1]),v=ie(C[0].end,C[1].end),C[0].end,C[1].end,A=g<1?pe:fe),g=(v/m*1).toFixed(2),y=Math.abs(m-v)),G===p.fingers||p.fingers===Pe||!u||F()){if(h=oe(c.start,c.end),function(e,t){if(!1===p.preventDefaultEvents)return;if(p.allowPageScroll===Te)e.preventDefault();else{var n=p.allowPageScroll===he;switch(t){case le:(p.swipeLeft&&n||!n&&p.allowPageScroll!=ye)&&e.preventDefault();break;case ue:(p.swipeRight&&n||!n&&p.allowPageScroll!=ye)&&e.preventDefault();break;case ce:(p.swipeUp&&n||!n&&p.allowPageScroll!=Ae)&&e.preventDefault();break;case de:(p.swipeDown&&n||!n&&p.allowPageScroll!=Ae)&&e.preventDefault()}}}(e,S=oe(c.last,c.end)),s=c.start,l=c.end,T=Math.round(Math.sqrt(Math.pow(l.x-s.x,2)+Math.pow(l.y-s.y,2))),b=re(),function(e,t){if(e==Te)return;t=Math.max(t,te(e)),P[e].distance=t}(h,T),n=k(t,M),!p.triggerOnTouchEnd||p.triggerOnTouchLeave){var d=!0;if(p.triggerOnTouchLeave){var f={left:(a=(o=se(o=this)).offset()).left,right:a.left+o.outerWidth(),top:a.top,bottom:a.top+o.outerHeight()};r=c.end,i=f,d=r.x>i.left&&r.x<i.right&&r.y>i.top&&r.y<i.bottom}!p.triggerOnTouchEnd&&d?M=N(Ce):p.triggerOnTouchLeave&&!d&&(M=N(He)),M!=Ee&&M!=He||k(t,M)}}else k(t,M=Ee);!1===n&&k(t,M=Ee)}}function B(e){var t,n=e.originalEvent?e.originalEvent:e,r=n.touches;if(r){if(r.length&&!Y())return t=n,u=ae(),c=t.touches.length+1,!0;if(r.length&&Y())return!0}return Y()&&(G=c),H=ae(),b=re(),V()||!_()?k(n,M=Ee):p.triggerOnTouchEnd||!1===p.triggerOnTouchEnd&&M===Ce?(!1!==p.preventDefaultEvents&&!1!==e.cancelable&&e.preventDefault(),k(n,M=He)):!p.triggerOnTouchEnd&&K()?O(n,M=He,me):M===Ce&&k(n,M=Ee),Z(!1),null}function D(){v=m=l=H=G=0,z(),Z(!(g=1))}function I(e){var t=e.originalEvent?e.originalEvent:e;p.triggerOnTouchLeave&&k(t,M=N(He))}function L(){s.off(n,w),s.off(a,D),s.off(r,x),s.off(i,B),o&&s.off(o,I),Z(!1)}function N(e){var t=e,n=R(),r=_(),i=V();return!n||i?t=Ee:!r||e!=Ce||p.triggerOnTouchEnd&&!p.triggerOnTouchLeave?!r&&e==He&&p.triggerOnTouchLeave&&(t=Ee):t=He,t}function k(e,t){var n,r=e.touches;return(W()&&j()||j())&&(n=O(e,t,Se)),(X()&&F()||F())&&!1!==n&&(n=O(e,t,be)),Q()&&$()&&!1!==n?n=O(e,t,ve):b>p.longTapThreshold&&T<Me&&p.longTap&&!1!==n?n=O(e,t,ge):1!==G&&we||!(isNaN(T)||T<p.threshold)||!K()||!1===n||(n=O(e,t,me)),t===Ee&&D(),t===He&&(r&&r.length||D()),n}function O(e,t,n){var r;if(n==Se){if(s.trigger("swipeStatus",[t,h||null,T||0,b||0,G,C,S]),p.swipeStatus&&!1===(r=p.swipeStatus.call(s,e,t,h||null,T||0,b||0,G,C,S)))return!1;if(t==He&&W()){if(clearTimeout(f),clearTimeout(E),s.trigger("swipe",[h,T,b,G,C,S]),p.swipe&&!1===(r=p.swipe.call(s,e,h,T,b,G,C,S)))return!1;switch(h){case le:s.trigger("swipeLeft",[h,T,b,G,C,S]),p.swipeLeft&&(r=p.swipeLeft.call(s,e,h,T,b,G,C,S));break;case ue:s.trigger("swipeRight",[h,T,b,G,C,S]),p.swipeRight&&(r=p.swipeRight.call(s,e,h,T,b,G,C,S));break;case ce:s.trigger("swipeUp",[h,T,b,G,C,S]),p.swipeUp&&(r=p.swipeUp.call(s,e,h,T,b,G,C,S));break;case de:s.trigger("swipeDown",[h,T,b,G,C,S]),p.swipeDown&&(r=p.swipeDown.call(s,e,h,T,b,G,C,S))}}}if(n==be){if(s.trigger("pinchStatus",[t,A||null,y||0,b||0,G,g,C]),p.pinchStatus&&!1===(r=p.pinchStatus.call(s,e,t,A||null,y||0,b||0,G,g,C)))return!1;if(t==He&&X())switch(A){case fe:s.trigger("pinchIn",[A||null,y||0,b||0,G,g,C]),p.pinchIn&&(r=p.pinchIn.call(s,e,A||null,y||0,b||0,G,g,C));break;case pe:s.trigger("pinchOut",[A||null,y||0,b||0,G,g,C]),p.pinchOut&&(r=p.pinchOut.call(s,e,A||null,y||0,b||0,G,g,C))}}return n==me?t!==Ee&&t!==He||(clearTimeout(f),clearTimeout(E),$()&&!Q()?(d=ae(),f=setTimeout(se.proxy(function(){d=null,s.trigger("tap",[e.target]),p.tap&&(r=p.tap.call(s,e,e.target))},this),p.doubleTapThreshold)):(d=null,s.trigger("tap",[e.target]),p.tap&&(r=p.tap.call(s,e,e.target)))):n==ve?t!==Ee&&t!==He||(clearTimeout(f),clearTimeout(E),d=null,s.trigger("doubletap",[e.target]),p.doubleTap&&(r=p.doubleTap.call(s,e,e.target))):n==ge&&(t!==Ee&&t!==He||(clearTimeout(f),d=null,s.trigger("longtap",[e.target]),p.longTap&&(r=p.longTap.call(s,e,e.target)))),r}function _(){var e=!0;return null!==p.threshold&&(e=T>=p.threshold),e}function V(){var e=!1;return null!==p.cancelThreshold&&null!==h&&(e=te(h)-T>=p.cancelThreshold),e}function R(){return!p.maxTimeThreshold||!(b>=p.maxTimeThreshold)}function X(){var e=q(),t=U(),n=null===p.pinchThreshold||y>=p.pinchThreshold;return e&&t&&n}function F(){return p.pinchStatus||p.pinchIn||p.pinchOut}function W(){var e=R(),t=_(),n=q(),r=U();return!V()&&r&&n&&t&&e}function j(){return p.swipe||p.swipeStatus||p.swipeLeft||p.swipeRight||p.swipeUp||p.swipeDown}function q(){return G===p.fingers||p.fingers===Pe||!we}function U(){return 0!==C[0].end.x}function K(){return p.tap}function $(){return!!p.doubleTap}function Q(){if(null==d)return!1;var e=ae();return $()&&e-d<=p.doubleTapThreshold}function z(){c=u=0}function Y(){var e=!1;u&&ae()-u<=p.fingerReleaseThreshold&&(e=!0);return e}function Z(e){s&&(!0===e?(s.on(r,x),s.on(i,B),o&&s.on(o,I)):(s.off(r,x,!1),s.off(i,B,!1),o&&s.off(o,I,!1)),s.data(De+"_intouch",!0===e))}function J(e,t){var n={start:{x:0,y:0},last:{x:0,y:0},end:{x:0,y:0}};return n.start.x=n.last.x=n.end.x=t.pageX||t.clientX,n.start.y=n.last.y=n.end.y=t.pageY||t.clientY,C[e]=n}function ee(e){var t=void 0!==e.identifier?e.identifier:0,n=C[t]||null;return null===n&&(n=J(t,e)),n.last.x=n.end.x,n.last.y=n.end.y,n.end.x=e.pageX||e.clientX,n.end.y=e.pageY||e.clientY,n}function te(e){if(P[e])return P[e].distance}function ne(e){return{direction:e,distance:0}}function re(){return H-l}function ie(e,t){var n=Math.abs(e.x-t.x),r=Math.abs(e.y-t.y);return Math.round(Math.sqrt(n*n+r*r))}function oe(e,t){if(r=t,(n=e).x==r.x&&n.y==r.y)return Te;var n,r,i,o,a,s,l,u,c=(o=t,a=(i=e).x-o.x,s=o.y-i.y,l=Math.atan2(s,a),(u=Math.round(180*l/Math.PI))<0&&(u=360-Math.abs(u)),u);return c<=45&&0<=c||c<=360&&315<=c?le:135<=c&&c<=225?ue:45<c&&c<135?de:ce}function ae(){return(new Date).getTime()}this.enable=function(){return this.disable(),s.on(n,w),s.on(a,D),s},this.disable=function(){return L(),s},this.destroy=function(){L(),s.data(De,null),s=null},this.option=function(e,t){if("object"===_typeof(e))p=se.extend(p,e);else if(void 0!==p[e]){if(void 0===t)return p[e];p[e]=t}else{if(!e)return p;se.error("Option "+e+" does not exist on jQuery.swipe.options")}return null}}se.fn.swipe=function(e){var t=se(this),n=t.data(De);if(n&&"string"==typeof e){if(n[e])return n[e].apply(n,Array.prototype.slice.call(arguments,1));se.error("Method "+e+" does not exist on jQuery.swipe")}else if(n&&"object"===_typeof(e))n.option.apply(n,arguments);else if(!(n||"object"!==_typeof(e)&&e))return function(n){!n||void 0!==n.allowPageScroll||void 0===n.swipe&&void 0===n.swipeStatus||(n.allowPageScroll=Te);void 0!==n.click&&void 0===n.tap&&(n.tap=n.click);n=n||{};return n=se.extend({},se.fn.swipe.defaults,n),this.each(function(){var e=se(this),t=e.data(De);t||(t=new r(this,n),e.data(De,t))})}.apply(this,arguments);return t},se.fn.swipe.version="1.6.18",se.fn.swipe.defaults={fingers:1,threshold:75,cancelThreshold:null,pinchThreshold:20,maxTimeThreshold:null,fingerReleaseThreshold:250,longTapThreshold:500,doubleTapThreshold:200,swipe:null,swipeLeft:null,swipeRight:null,swipeUp:null,swipeDown:null,swipeStatus:null,pinchIn:null,pinchOut:null,pinchStatus:null,click:null,tap:null,doubleTap:null,longTap:null,hold:null,triggerOnTouchEnd:!0,triggerOnTouchLeave:!1,allowPageScroll:"auto",fallbackToMouseEvents:!0,excludedElements:".noSwipe",preventDefaultEvents:!0},se.fn.swipe.phases={PHASE_START:Ge,PHASE_MOVE:Ce,PHASE_END:He,PHASE_CANCEL:Ee},se.fn.swipe.directions={LEFT:le,RIGHT:ue,UP:ce,DOWN:de,IN:fe,OUT:pe},se.fn.swipe.pageScroll={NONE:Te,HORIZONTAL:ye,VERTICAL:Ae,AUTO:he},se.fn.swipe.fingers={ONE:1,TWO:2,THREE:3,FOUR:4,FIVE:5,ALL:Pe}}),function(){var e=document.querySelector(".team__item--active"),t=e.querySelector(".team__content"),n=e.querySelector(".team__about").scrollHeight;t.style.height=n+100+"px";new function(e,l){this.list=document.querySelector(e),this.element=this.list||{};var u=this.list.children;for(i=0;i<u.length;i++){u[i].querySelector("[data-btn]").addEventListener("click",function(e){var t=e.target.closest("[data-btn]");if(t){var n=t.parentNode,r=n.querySelector(".team__content"),i=r.querySelector(".team__about").scrollHeight;if(console.log(i),n.classList.contains(l))n.classList.remove(l),r.style.height="0px";else{var o,a=_createForOfIteratorHelper(u);try{for(a.s();!(o=a.n()).done;){var s=o.value;s.classList.remove(l),s.querySelector(".team__content").style.height="0px"}}catch(e){a.e(e)}finally{a.f()}n.classList.add(l),r.style.height=i+100+"px"}}})}}(".team__list","team__item--active"),new function(e,s){this.list=document.querySelector(e),this.element=this.list||{};var l=this.list.children;for(i=0;i<l.length;i++){l[i].querySelector("[data-btn]").addEventListener("click",function(e){var t=e.target.closest("[data-btn]");if(t){var n=t.parentNode,r=n.querySelector(".menu-section__item-wrapper");if(n.classList.contains(s))n.classList.remove(s),r.style.width="0";else{var i,o=_createForOfIteratorHelper(l);try{for(o.s();!(i=o.n()).done;){var a=i.value;a.classList.remove(s),a.querySelector(".menu-section__item-wrapper").style.width="0"}}catch(e){o.e(e)}finally{o.f()}n.classList.add(s),r.style.width="530px"}}})}}(".menu-section__list","menu-section__item--active")}(),function(){function e(){var t=n[i];t.querySelector(".menu-section__close-btn").addEventListener("click",function(e){e.preventDefault(),t.classList.remove("menu-section__item--active"),t.querySelector(".menu-section__item-wrapper").style.width="0"})}var n=document.querySelector(".menu-section__list").children;for(i=0;i<n.length;i++)e();var t,r=_createForOfIteratorHelper(document.querySelector(".slider__list").children);try{var o=function(){item=t.value;var o=item.querySelector(".slider__btn"),a=item.querySelector(".slider__composition-list");o.addEventListener("click",function(e){e.preventDefault();var i=o.classList.contains("slider__btn--active");i?(o.classList.remove("slider__btn--active"),a.classList.remove("slider__composition-list--active")):(o.classList.add("slider__btn--active"),a.classList.add("slider__composition-list--active")),document.addEventListener("click",function(e){i=o.classList.contains("slider__btn--active");var t=e.target,n=e.target==o||o.contains(t),r=e.target==a||a.contains(t);!i||n||r||(o.classList.remove("slider__btn--active"),a.classList.remove("slider__composition-list--active"),i=o.classList.contains("slider__btn--active"))})}),item.querySelector(".close-btn").addEventListener("click",function(e){e.preventDefault(),o.classList.remove("slider__btn--active"),a.classList.remove("slider__composition-list--active")})};for(r.s();!(t=r.n()).done;)o()}catch(e){r.e(e)}finally{r.f()}}(),function(){var o=document.querySelector("#form-order"),e=o.querySelector("#submit"),a=o.querySelector("#reset"),s=function(e){var t=document.createElement("div"),n=document.querySelector(".wrapper");t.innerHTML=e;var r=t.querySelector(".overlay"),i=t.querySelector(".overlay__content"),o=t.querySelector(".overlay__close");return r.addEventListener("click",function(e){e.target===r&&o.click()}),o.addEventListener("click",function(){console.log(o),n.removeChild(r)}),{open:function(){n.appendChild(r)},close:function(){o.click()},setContent:function(e){i.innerHTML=e}}}(document.querySelector("#overlayTemplate").innerHTML);e.addEventListener("click",function(e){if(e.preventDefault(),function(){var e=!0;i(o.elements.name)||(e=!1);i(o.elements.phone)||(e=!1);return e}()){var t;t=o.elements.comment.value?o.elements.comment.value:"ÐÐ¾ÑÐµÑÐ¸ÑÐµÐ»Ñ Ð½Ðµ Ð¾ÑÑÐ°Ð²Ð¸Ð» ÐºÐ¾Ð¼Ð¼ÐµÐ½ÑÐ°ÑÐ¸Ñ";var n=new FormData;n.append("name",o.elements.name.value),n.append("phone",o.elements.phone.value),n.append("comment",t),n.append("to","empty@email.ru");var r=new XMLHttpRequest;r.responseType="json",r.open("POST","https://webdev-api.loftschool.com/sendmail"),r.send(n),r.addEventListener("load",function(){r.response&&(console.log(r),422!==r.status&&(s.open(),s.setContent(r.response.message),a.click()))})}function i(e){return console.log(e),e.nextElementSibling.textContent=e.validationMessage,e.checkValidity}})}(),function(){var t=document.querySelector("#hamburger-menu"),n=document.querySelector(".primary-menu"),e=document.querySelectorAll(".primary-menu__link"),r=document.body;t.addEventListener("click",function(e){e.preventDefault(),t.classList.toggle("hamburger-menu--active"),n.classList.toggle("primary-menu--active"),r.classList.toggle("body--active")});for(var i=0;i<e.length;i++)e[i].addEventListener("click",function(e){t.classList.remove("hamburger-menu--active"),n.classList.remove("primary-menu--active"),r.classList.remove("body--active")})}();var init=function(){for(var e=new ymaps.Map("map",{controls:[],center:[59.938951,30.315635],zoom:12}),t=[[59.980606,30.347189],[59.945499,30.26706],[59.937999,30.377596]],n=["Ð£ÑÑÐ½Ð°Ñ ÐºÐ°ÑÐµÑÐºÐ° Ð½Ð° Ð¢Ð²ÐµÑÑÐºÐ¾Ð¹, 23","ÐÐ´ÐµÐ¼ Ð²Ð°Ñ Ð² ÐºÐ°ÑÐµ Ð½Ð° ÐÐ°ÑÐ²ÑÐºÐ¾Ð¹, 42","ÐÐºÑÑÐ½ÑÐµ Ð»Ð°Ð½ÑÐ¸ Ð¸ Ð°ÑÐ¾Ð¼Ð°ÑÐ½ÑÐ¹ ÐºÐ¾ÑÐµ Ð½Ð° ÐÐµÐ½Ð¸Ð½ÑÐºÐ¾Ð¼, 22"],r=new ymaps.GeoObjectCollection({},{iconLayout:"default#image",iconImageHref:"icons/map-marker.svg",iconImageSize:[60,60],iconImageOffset:[-3,-42]}),i=0;i<t.length;i++)r.add(new ymaps.Placemark(t[i],{balloonContent:n[i]}));e.geoObjects.add(r),e.behaviors.disable("scrollZoom")};ymaps.ready(init),$(document).ready(function(){var i=$(".section"),r=$(".maincontent"),o=!1,e=new MobileDetect(window.navigator.userAgent).mobile();$(".section").each(function(){var e=$("<li>",{attr:{class:"pagination__item"},html:'<div class="pagination__circle"></div>'});$(".pagination__list").append(e),$(".pagination__item:first-child").addClass("pagination__item--active")});function a(t){if(!o){o=!0;var e,n=(e=100*-t,isNaN(e)&&console.error("Ð ÑÑÐ½ÐºÑÐ¸Ñ countSectionPosition Ð¿ÐµÑÐµÐ´Ð°Ð½Ð¾ Ð½ÐµÐ²ÐµÑÐ½Ð¾Ðµ Ð·Ð½Ð°ÑÐµÐ½Ð¸Ðµ"),e);i.eq(t).addClass("section--active").siblings().removeClass("section--active"),r.css({transform:"translateY(".concat(n,"%)")}),r.on("transitionend",function(e){$(".pagination__item").eq(t).addClass("pagination__item--active").siblings().removeClass("pagination__item--active"),o=!1})}}function s(e){var t=i.filter(".section--active"),n=t.next(),r=t.prev();n.length&&"next"===e&&a(n.index()),r.length&&"prev"===e&&a(r.index())}$(window).on("wheel",function(e){var t=e.originalEvent.deltaY;0<t&&s("next"),t<0&&s("prev")}),$(document).on("keydown",function(e){var t=e.target.tagName.toLowerCase();if(!("input"===t||"textarea"===t))switch(e.keyCode){case 38:s("prev");break;case 40:s("next")}}),$(".pagination__item").on("click",function(e){e.preventDefault();var t=$(e.currentTarget).index();a(t)}),$("[data-scroll-to]").on("click",function(e){e.preventDefault();var t=$(e.currentTarget).attr("data-scroll-to");a(t)}),e&&$("body").swipe({swipe:function(e,t){var n;"up"===t&&(n="next"),"down"===t&&(n="prev"),s(n)}})}),function(){var o=document.querySelector(".wrapper"),e=document.querySelector("#overlayReviews").innerHTML,t=document.querySelector(".review__list").querySelectorAll(".btn__link"),n=function(e){var t=document.createElement("div");t.innerHTML=e;var n=t.querySelector(".review__overlay"),r=t.querySelector(".review__desc"),i=t.querySelector(".close-btn");return n.addEventListener("click",function(e){e.target===n&&i.click()}),i.addEventListener("click",function(){o.removeChild(n)}),{open:function(){o.appendChild(n)},close:function(){i.click()},setContent:function(e){r.innerHTML=e}}}(e);for(i=0;i<t.length;i++)t[i].addEventListener("click",function(e){var t=e.currentTarget.closest(".review__content").querySelector(".review__text").innerHTML;n.open(),n.setContent(t)})}();var tag=document.createElement("script");tag.src="https://www.youtube.com/iframe_api";var player,firstScriptTag=document.getElementsByTagName("script")[0];firstScriptTag.parentNode.insertBefore(tag,firstScriptTag);var playerContainer=$(".player"),eventsInit=function(){$(".player__start").on("click",function(e){e.preventDefault();$(e.currentTarget);if(playerContainer.hasClass("paused")){player.pauseVideo();var t=player.getVolume();$(".player__volume-button").css({left:"".concat(t,"%")})}else{player.playVideo();var n=player.getVolume();$(".player__volume-button").css({left:"".concat(n,"%")})}}),$(".player__splash").on("click",function(e){e.preventDefault();$(e.currentTarget);if(playerContainer.hasClass("paused")){player.pauseVideo();var t=player.getVolume();$(".player__volume-button").css({left:"".concat(t,"%")})}else{player.playVideo();var n=player.getVolume();$(".player__volume-button").css({left:"".concat(n,"%")})}}),$(".player__playback").on("click",function(e){var t=$(e.currentTarget),n=e.originalEvent.layerX/t.width()*100,r=player.getDuration()/100*n;$(".player__playback-button").css({left:"".concat(n,"%")}),player.seekTo(r)}),$(".player__playback").on("click",function(e){player.playVideo()}),$(".player__volume").on("click",function(e){var t=$(e.currentTarget),n=e.originalEvent.layerX/t.width()*100;player.setVolume(n),$(".player__volume-button").css({left:"".concat(n,"%")})}),$(".player__void-button").on("click",function(e){if(player.isMuted()){player.unMute();var t=player.getVolume();$(".player__volume-button").css({left:"".concat(t,"%")})}else player.mute(),$(".player__volume-button").css({left:"0%"})})},formatTime=function(e){var t=Math.round(e),n=i(Math.floor(t/60)),r=i(t-60*n);function i(e){return e<10?"0".concat(e):e}return"".concat(n,":").concat(r)},onPlayerReady=function(){var e,n=player.getDuration();$(".player__duration--estimate").text(formatTime(n)),void 0!==e&&clearInterval(e),e=setInterval(function(){var e=player.getCurrentTime(),t=e/n*100;$(".player__playback-button").css({left:"".concat(t,"%")}),$(".player__duration--completed").text(formatTime(e))},1e3)},onPlayerStateChange=function(e){switch(e.data){case 1:playerContainer.addClass("paused"),playerContainer.addClass("active");break;case 2:playerContainer.removeClass("active"),playerContainer.removeClass("paused")}};function onYouTubeIframeAPIReady(){player=new YT.Player("yt-player",{height:"100%",width:"100%",videoId:"E5DjLa9Z0s4",events:{onReady:onPlayerReady,onStateChange:onPlayerStateChange},playerVars:{controls:0,disablekb:0,autoplay:0,modestbranding:1,rel:0,showinfo:0,cc_load_policy:0,iv_load_policy:3}})}eventsInit();var coloringDots=function(e){$(".slider__carousel").find(".slider__dot-item").eq(e).addClass("slider__dot-item--active").siblings().removeClass("slider__dot-item--active")},moveSlide=function(e,t){var n=e.find(".slider__item"),r=n.filter(".slider__item--active"),i=n.eq(t),o=i.index(),a=e.find(".slider__list");i.length&&a.animate({left:100*-o+"%"},500,function(){r.removeClass("slider__item--active"),i.addClass("slider__item--active"),coloringDots(t)})};$(".slider__arrow").on("click",function(e){e.preventDefault();var t,n,r,i=$(this),o=i.closest(".slider__carousel"),a=$(".slider__item"),s=a.filter(".slider__item--active");s.next(),s.prev();i.hasClass("slider__arrow--right")&&(t=s.next(),n=a.first()),i.hasClass("slider__arrow--left")&&(t=s.prev(),n=a.last()),r=t.length?t.index():n.index(),moveSlide(o,r)}),function(){var l=document.querySelector("#videoplayer-html"),n=$(".videoplayer__container"),e=$(".videoplayer__btn"),t=$(".videoplayer__splash"),r=$(".videoplayer__wrapper");$(".videoplayer__void-button").on("click",function(){l.muted?l.muted=!1:l.muted=!0,console.log(l.muted)}),r.on("click",function(e){n.hasClass("paused")?(l.pause(),n.removeClass("paused")):(l.play(),n.addClass("paused"));var t=l.volume;$(".videoplayer__volume-button").css({left:100*"".concat(t)+"%"})}),t.on("click",function(e){n.hasClass("paused")?(l.pause(),n.removeClass("paused")):(l.play(),n.addClass("paused"));var t=l.volume;$(".videoplayer__volume-button").css({left:100*"".concat(t)+"%"})}),e.on("click",function(e){n.hasClass("paused")?(l.pause(),n.removeClass("paused")):(l.play(),n.addClass("paused"));var t=l.volume;$(".videoplayer__volume-button").css({left:100*"".concat(t)+"%"})}),$(".videoplayer__playback").on("click",function(e){var t=$(e.currentTarget),n=e.originalEvent.layerX,r=Math.round(n/t.width()*100),i=Math.round(l.duration/100*r);$(".videoplayer__playback-button").css({left:"".concat(r,"%")}),l.currentTime=i}),$(".videoplayer__playback").on("click",function(e){n.hasClass("paused")?l.play():l.pause()}),$(".videoplayer__volume").on("click",function(e){var t=$(e.currentTarget),n=e.originalEvent.layerX/t.width();l.volume=n,$(".videoplayer__volume-button").css({left:100*"".concat(n)+"%"})});l.onplay=function(){var e,s=l.duration;void 0!==e&&clearInterval(e),e=setInterval(function(){var e,t,n,r,i=Math.round(l.currentTime),o=i/s*100;function a(e){return e<10?"0".concat(e):e}$(".videoplayer__playback-button").css({left:"".concat(o,"%")}),$(".videoplayer__duration--completed").text((e=i,t=Math.round(e),n=a(Math.floor(t/60)),r=a(t-60*n),"".concat(n,":").concat(r)))},1e3),l.ended&&n.removeClass("paused")},l.onended=function(){n.removeClass("paused")}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
